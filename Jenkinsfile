pipeline {
    agent any

    // –¢—Ä–∏–≥–µ—Ä–∏ - –∑–∞–ø—É—Å–∫ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø—É—à—ñ –≤ dev –≥—ñ–ª–∫—É
    triggers {
        githubPush()
    }

    // –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    environment {
        REPO_URL = 'https://github.com/Abendgast/Gitea.git'
        MAIN_BRANCH = 'main'
        DEV_BRANCH = 'dev'
        NODE_VERSION = '20'
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Node.js —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ –ø–∞–º'—è—Ç—Ç—é
        NODE_OPTIONS = '--max-old-space-size=4096'
    }

    // –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —è–∫—ñ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ
    tools {
        nodejs "${NODE_VERSION}"
        go 'go-1.21'
    }

    stages {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥—ñ–ª–∫–∏ —Ç–∞ checkout –∫–æ–¥—É
        stage('Checkout and Validate') {
            steps {
                // Checkout –∫–æ–¥—É –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
                checkout scm

                script {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑ dev –≥—ñ–ª–∫–æ—é
                    if (env.BRANCH_NAME != 'dev') {
                        currentBuild.result = 'ABORTED'
                        error("Pipeline –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è dev –≥—ñ–ª–∫–∏. –ü–æ—Ç–æ—á–Ω–∞ –≥—ñ–ª–∫–∞: ${env.BRANCH_NAME}")
                    }

                    echo "‚úì –ü—Ä–∞—Ü—é—î–º–æ –∑ dev –≥—ñ–ª–∫–æ—é"
                    echo "‚úì –ö–æ–¥ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"
                }
            }
        }

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        stage('Environment Setup') {
            steps {
                sh '''
                    echo "=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ ==="
                    echo "Node.js –≤–µ—Ä—Å—ñ—è:"
                    node --version
                    echo "NPM –≤–µ—Ä—Å—ñ—è:"
                    npm --version
                    echo "Go –≤–µ—Ä—Å—ñ—è:"
                    go version

                    echo "=== –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É ==="
                    npm cache clean --force || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ npm cache, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ..."
                '''
            }
        }

        // –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        stage('Analyze Changes') {
            steps {
                script {
                    sh '''
                        echo "=== –ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ ==="

                        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –º—ñ–∂ dev —Ç–∞ main
                        git fetch origin main
                        CHANGED_FILES=$(git diff --name-only origin/main...HEAD)

                        echo "–ó–º—ñ–Ω–µ–Ω—ñ —Ñ–∞–π–ª–∏:"
                        echo "$CHANGED_FILES"

                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —É —Ñ–∞–π–ª –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç–∞–¥—ñ–π
                        echo "$CHANGED_FILES" > changed_files.txt

                        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–∏–ø–∏ –∑–º—ñ–Ω (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–µ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è Jenkins)
                        GO_FILES=$(echo "$CHANGED_FILES" | grep -E '\\.go$' || true)
                        JS_FILES=$(echo "$CHANGED_FILES" | grep -E '\\.(js|ts|vue)$' || true)
                        CONFIG_FILES=$(echo "$CHANGED_FILES" | grep -E '\\.(yml|yaml|json|toml)$' || true)

                        echo "Go —Ñ–∞–π–ª–∏:"
                        echo "$GO_FILES"
                        echo "JS —Ñ–∞–π–ª–∏:"
                        echo "$JS_FILES"
                        echo "–ö–æ–Ω—Ñ—ñ–≥ —Ñ–∞–π–ª–∏:"
                        echo "$CONFIG_FILES"

                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
                        echo "$GO_FILES" > changed_go_files.txt
                        echo "$JS_FILES" > changed_js_files.txt
                        echo "$CONFIG_FILES" > changed_config_files.txt

                        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
                        GO_COUNT=$(echo "$GO_FILES" | grep -v "^$" | wc -l || echo "0")
                        JS_COUNT=$(echo "$JS_FILES" | grep -v "^$" | wc -l || echo "0")
                        CONFIG_COUNT=$(echo "$CONFIG_FILES" | grep -v "^$" | wc -l || echo "0")

                        echo "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∏—Ö Go —Ñ–∞–π–ª—ñ–≤: $GO_COUNT"
                        echo "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∏—Ö JS —Ñ–∞–π–ª—ñ–≤: $JS_COUNT"
                        echo "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥ —Ñ–∞–π–ª—ñ–≤: $CONFIG_COUNT"
                    '''
                }
            }
        }

        // –†–æ–∑—É–º–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–º—ñ–Ω
        stage('Smart Testing Strategy') {
            steps {
                script {
                    // –ß–∏—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É
                    def changedGoFiles = ""
                    def changedJsFiles = ""
                    def changedConfigFiles = ""

                    try {
                        changedGoFiles = readFile('changed_go_files.txt').trim()
                        changedJsFiles = readFile('changed_js_files.txt').trim()
                        changedConfigFiles = readFile('changed_config_files.txt').trim()
                    } catch (Exception e) {
                        echo "–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É: ${e.message}"
                        changedGoFiles = ""
                        changedJsFiles = ""
                        changedConfigFiles = ""
                    }

                    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–º—ñ–Ω
                    def testStrategy = 'minimal' // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

                    echo "–ê–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
                    echo "Go —Ñ–∞–π–ª–∏: '${changedGoFiles}'"
                    echo "Config —Ñ–∞–π–ª–∏: '${changedConfigFiles}'"

                    // –Ø–∫—â–æ –∑–º—ñ–Ω–µ–Ω–æ main.go –∞–±–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
                    if (changedGoFiles.contains('main.go') || changedConfigFiles.length() > 0) {
                        testStrategy = 'core'
                        echo "–í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–∏ –≤ main.go –∞–±–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó - core —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                    }

                    // –Ø–∫—â–æ –∑–º—ñ–Ω–µ–Ω–æ –º–æ–¥–µ–ª—ñ –∞–±–æ —Å–µ—Ä–≤—ñ—Å–∏
                    if (changedGoFiles.contains('models/') || changedGoFiles.contains('services/')) {
                        testStrategy = 'extended'
                        echo "–í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–∏ –≤ –º–æ–¥–µ–ª—è—Ö –∞–±–æ —Å–µ—Ä–≤—ñ—Å–∞—Ö - extended —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                    }

                    // –Ø–∫—â–æ –∑–º—ñ–Ω–µ–Ω–æ —Ä–æ—É—Ç–µ—Ä–∏ –∞–±–æ –º–æ–¥—É–ª—ñ
                    if (changedGoFiles.contains('routers/') || changedGoFiles.contains('modules/')) {
                        testStrategy = 'full'
                        echo "–í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–∏ –≤ —Ä–æ—É—Ç–µ—Ä–∞—Ö –∞–±–æ –º–æ–¥—É–ª—è—Ö - full —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                    }

                    // –Ø–∫—â–æ –∑–º—ñ–Ω–µ–Ω–æ –±–∞–≥–∞—Ç–æ —Ñ–∞–π–ª—ñ–≤
                    def totalChanges = changedGoFiles.split('\\n').length
                    if (totalChanges > 10) {
                        testStrategy = 'full'
                        echo "–ë–∞–≥–∞—Ç–æ –∑–º—ñ–Ω (${totalChanges} —Ñ–∞–π–ª—ñ–≤) - full —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                    }

                    env.TEST_STRATEGY = testStrategy
                    echo ">>> –û–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${testStrategy} <<<"
                }
            }
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        stage('Install Dependencies') {
            parallel {
                // Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
                stage('Go Dependencies') {
                    steps {
                        sh '''
                            echo "=== –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ==="
                            go mod download
                            go mod tidy
                            echo "‚úì Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                        '''
                    }
                }

                // Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (—è–∫—â–æ —î)
                stage('Node.js Dependencies') {
                    when {
                        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î package.json
                        expression { fileExists('package.json') }
                    }
                    steps {
                        sh '''
                            echo "=== –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ==="
                            npm install --legacy-peer-deps --no-audit --no-fund
                            echo "‚úì Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                        '''
                    }
                }
            }
        }

        // –†–æ–∑—É–º–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó
        stage('Smart Tests Execution') {
            parallel {
                // Backend —Ç–µ—Å—Ç–∏ (Go) - —Ä–æ–∑—É–º–Ω—ñ
                stage('Backend Tests') {
                    steps {
                        script {
                            echo "–°—Ç—Ä–∞—Ç–µ–≥—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${env.TEST_STRATEGY}"

                            sh '''
                                echo "=== –ó–∞–ø—É—Å–∫ backend —Ç–µ—Å—Ç—ñ–≤ (—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: ${TEST_STRATEGY}) ==="

                                case "${TEST_STRATEGY}" in
                                    "minimal")
                                        echo "üéØ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - —Ç—ñ–ª—å–∫–∏ –∑–º—ñ–Ω–µ–Ω—ñ –ø–∞–∫–µ—Ç–∏"
                                        CHANGED_GO_FILES=$(cat changed_go_files.txt | tr '\\n' ' ')
                                        if [ -n "$CHANGED_GO_FILES" ] && [ "$CHANGED_GO_FILES" != " " ]; then
                                            # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó Go –ø–∞–∫–µ—Ç—ñ–≤
                                            echo "–ó–º—ñ–Ω–µ–Ω—ñ Go —Ñ–∞–π–ª–∏: $CHANGED_GO_FILES"
                                            PACKAGES=$(echo "$CHANGED_GO_FILES" | xargs -n1 dirname | sort -u | sed 's|^|./|' | grep -v '^\\.$' | tr '\\n' ' ')
                                            echo "–ü–∞–∫–µ—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: $PACKAGES"
                                            if [ -n "$PACKAGES" ]; then
                                                go test $PACKAGES -v -timeout=10m
                                            else
                                                echo "–ù–µ–º–∞—î –ø–∞–∫–µ—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                                            fi
                                        else
                                            echo "–ù–µ–º–∞—î –∑–º—ñ–Ω–µ–Ω–∏—Ö Go —Ñ–∞–π–ª—ñ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏"
                                        fi
                                        ;;
                                    "core")
                                        echo "üî• –û—Å–Ω–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –∫—Ä–∏—Ç–∏—á–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏"
                                        echo "–¢–µ—Å—Ç—É—î–º–æ core –º–æ–¥—É–ª—ñ..."
                                        go test ./cmd/... -v -timeout=10m || echo "CMD —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                        go test ./modules/setting/... -v -timeout=10m || echo "Setting —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                        go test ./modules/log/... -v -timeout=10m || echo "Log —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                        go test ./modules/util/... -v -timeout=10m || echo "Util —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                        ;;
                                    "extended")
                                        echo "üöÄ –†–æ–∑—à–∏—Ä–µ–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –º–æ–¥–µ–ª—ñ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∏"
                                        echo "–¢–µ—Å—Ç—É—î–º–æ –º–æ–¥–µ–ª—ñ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–∏..."
                                        go test ./models/... -v -timeout=15m -parallel=2 || echo "Models —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                        go test ./services/... -v -timeout=15m -parallel=2 || echo "Services —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                        go test ./modules/... -v -timeout=15m -parallel=2 || echo "Modules —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                        ;;
                                    "full")
                                        echo "üí• –ü–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏"
                                        echo "–ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä —Ç–µ—Å—Ç—ñ–≤..."
                                        if [ -f "Makefile" ] && grep -q "test-backend" Makefile; then
                                            timeout 30m make test-backend || echo "Make test –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é –∞–±–æ —Ç–∞–π–º-–∞—É—Ç–æ–º"
                                        else
                                            timeout 30m go test ./... -v -parallel=4 || echo "Go test –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é –∞–±–æ —Ç–∞–π–º-–∞—É—Ç–æ–º"
                                        fi
                                        ;;
                                esac

                                echo "‚úÖ Backend —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: ${TEST_STRATEGY}"
                            '''
                        }
                    }
                }

                // Frontend —Ç–µ—Å—Ç–∏ (—è–∫—â–æ —î)
                stage('Frontend Tests') {
                    when {
                        allOf {
                            expression { fileExists('package.json') }
                            expression {
                                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î test —Å–∫—Ä–∏–ø—Ç –≤ package.json
                                try {
                                    sh(script: 'grep -q "\\"test\\"" package.json', returnStatus: true) == 0
                                } catch (Exception e) {
                                    return false
                                }
                            }
                        }
                    }
                    steps {
                        sh '''
                            echo "=== –ó–∞–ø—É—Å–∫ frontend —Ç–µ—Å—Ç—ñ–≤ ==="
                            timeout 10m npm test || echo "Frontend —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º"
                            echo "‚úÖ Frontend —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
                        '''
                    }
                }

                // –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É
                stage('Quick Code Quality') {
                    steps {
                        sh '''
                            echo "=== –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É ==="

                            # Go —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è - —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
                            CHANGED_GO_FILES=$(cat changed_go_files.txt | tr '\\n' ' ')
                            if [ -n "$CHANGED_GO_FILES" ] && [ "$CHANGED_GO_FILES" != " " ]; then
                                echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è Go —Ñ–∞–π–ª—ñ–≤..."
                                echo "$CHANGED_GO_FILES" | xargs gofmt -l | head -10
                                echo "‚úì –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                            else
                                echo "–ù–µ–º–∞—î Go —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è"
                            fi

                            echo "‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                        '''
                    }
                }
            }
        }

        // –ú–µ—Ä–¥–∂ –≤ main –≥—ñ–ª–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏
        stage('Merge to Main') {
            when {
                // –í–∏–∫–æ–Ω—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è dev –≥—ñ–ª–∫–∏ —ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å—Ç–∞–¥—ñ—ó —É—Å–ø—ñ—à–Ω—ñ
                allOf {
                    branch 'dev'
                    expression { currentBuild.currentResult == 'SUCCESS' }
                }
            }
            steps {
                script {
                    echo "=== –ü–æ—á–∞—Ç–æ–∫ –º–µ—Ä–¥–∂—É –≤ main –≥—ñ–ª–∫—É ==="

                    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è git –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    sh '''
                        git config user.name "Jenkins CI"
                        git config user.email "jenkins@yourcompany.com"
                        git config --global user.name "Jenkins CI"
                        git config --global user.email "jenkins@yourcompany.com"
                    '''

                    // –ú–µ—Ä–¥–∂ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
                    withCredentials([usernamePassword(
                        credentialsId: 'github-credentials',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD'
                    )]) {
                        sh '''
                            echo "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è remote URL –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é..."
                            git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Abendgast/Gitea.git

                            echo "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–º—ñ–Ω..."
                            git fetch origin

                            echo "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ main –≥—ñ–ª–∫—É..."
                            git checkout main
                            git pull origin main

                            echo "–ú–µ—Ä–¥–∂ dev –≤ main..."
                            COMMIT_MSG=$(git log --oneline -1 origin/dev)
                            git merge origin/dev --no-ff -m "üöÄ Auto merge from dev branch via Jenkins CI

‚úÖ All tests passed (strategy: ${TEST_STRATEGY})
üìù Latest commit: $COMMIT_MSG
üïê Merged at: $(date)
ü§ñ Jenkins build: ${BUILD_NUMBER}
"

                            echo "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–º—ñ–Ω..."
                            git push origin main

                            echo "‚úÖ –ú–µ—Ä–¥–∂ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
                        '''
                    }
                }
            }
        }
    }

    // –ü–æ—Å—Ç-–¥—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    post {
        success {
            script {
                if (env.BRANCH_NAME == 'dev') {
                    echo """
üéâ –£–°–ü–Ü–•!
‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${env.TEST_STRATEGY}
‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ
üîÑ –ó–º—ñ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º–µ—Ä–∂–µ–Ω–æ –≤ main –≥—ñ–ª–∫—É
üöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è –¥–µ–ø–ª–æ—é!
üìä Jenkins build #${BUILD_NUMBER}
                    """
                } else {
                    echo '‚úÖ Pipeline –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!'
                }
            }
        }

        failure {
            echo """
‚ùå –ü–û–ú–ò–õ–ö–ê!
üö´ Pipeline –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é
üîí –ó–º—ñ–Ω–∏ –ù–ï –±—É–ª–∏ –∑–º–µ—Ä–∂–µ–Ω–æ –≤ main
üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
üìä Jenkins build #${BUILD_NUMBER}
            """
        }

        unstable {
            echo """
‚ö†Ô∏è  –ù–ï–°–¢–ê–ë–Ü–õ–¨–ù–ò–ô –°–¢–ê–ù!
üîÑ –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏
üîí –ú–µ—Ä–¥–∂ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
üìä Jenkins build #${BUILD_NUMBER}
            """
        }

        always {
            // –ó–∞–≤–∂–¥–∏ –æ—á–∏—â—É—î–º–æ —Ä–æ–±–æ—á–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä
            echo "üßπ –û—á–∏—â–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É..."
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è –¥–µ–±–∞–≥—É
            archiveArtifacts artifacts: 'changed_*.txt', allowEmptyArchive: true, fingerprint: true
            cleanWs()
        }
    }
}

