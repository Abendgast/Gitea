pipeline {
    agent any

    triggers {
        githubPush()
        pollSCM('H/5 * * * *') // Backup polling every 5 minutes
    }

    tools {
        go 'go-1.21'
        nodejs 'nodejs-18'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 15, unit: 'MINUTES')
        skipStagesAfterUnstable()
        ansiColor('xterm')
        retry(1)
    }

    environment {
        GOPROXY = 'https://proxy.golang.org,direct'
        CGO_ENABLED = '1'
        BUILD_TAGS = 'sqlite sqlite_unlock_notify'
        GOPATH = "${env.WORKSPACE}/.go"
        GOCACHE = "${env.WORKSPACE}/.cache/go-build"
        NPM_CONFIG_CACHE = "${env.WORKSPACE}/.cache/npm"
        HOME = "${env.WORKSPACE}"
        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
        GITEA_CONF_FOR_TEST = '1'
        GITEA_ROOT_PATH = "${env.WORKSPACE}"
        GITEA_WORK_DIR = "${env.WORKSPACE}"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "üîÑ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–¥—É..."
                    checkout scm
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    env.BUILD_VERSION = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                }
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    echo "üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
                    sh '''
                        echo "üêπ Go version:"
                        go version || echo "‚ö†Ô∏è  Go –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

                        echo "üì¶ Node.js version:"
                        node --version || echo "‚ö†Ô∏è  Node.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

                        echo "üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –∫–µ—à—É..."
                        mkdir -p .cache/go-build .cache/npm .go/pkg/mod

                        echo "üóÑÔ∏è  –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
                        mkdir -p /tmp/gitea-test-${BUILD_NUMBER}
                        mkdir -p tests/tmp

                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å sqlite3
                        echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SQLite3:"
                        sqlite3 --version || echo "‚ö†Ô∏è  SQLite3 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

                        # –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ç–µ—Å—Ç–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
                        if [ ! -f "app.ini" ]; then
                            echo "üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó..."
                            cat > tests/app.ini << 'EOF'
[database]
DB_TYPE = sqlite3
PATH = :memory:
LOG_SQL = false

[security]
SECRET_KEY = test_secret_key_for_ci_pipeline_$(date +%s)
INTERNAL_TOKEN = test_internal_token_for_ci

[log]
MODE = console
LEVEL = Warn

[server]
OFFLINE_MODE = true

[mailer]
ENABLED = false

[service]
DISABLE_REGISTRATION = true
REQUIRE_SIGNIN_VIEW = false

[picture]
DISABLE_GRAVATAR = true

[session]
PROVIDER = memory

[cache]
ADAPTER = memory
EOF
                        fi

                        echo "‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ"
                    '''
                }
            }
        }

        stage('Dependencies') {
            steps {
                script {
                    echo "üì• –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Go
                    def goAvailable = sh(script: 'command -v go', returnStatus: true) == 0
                    if (goAvailable) {
                        echo "üêπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
                        sh '''
                            export PATH=$PATH:$(go env GOPATH)/bin
                            go mod download
                            go mod verify
                        '''
                    } else {
                        echo "‚ö†Ô∏è  Go –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"
                    }

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ frontend
                    if (fileExists('package.json')) {
                        def nodeAvailable = sh(script: 'command -v npm', returnStatus: true) == 0
                        if (nodeAvailable) {
                            echo "üé® –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è frontend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
                            sh '''
                                npm install --silent --no-progress --cache ${NPM_CONFIG_CACHE}
                            '''
                        } else {
                            echo "‚ö†Ô∏è  Node.js/npm –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ frontend"
                        }
                    } else {
                        echo "üìù package.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ frontend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"
                    }
                }
            }
        }

        stage('Code Quality') {
            when {
                expression {
                    sh(script: 'command -v go', returnStatus: true) == 0
                }
            }
            steps {
                script {
                    echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É..."
                    sh '''
                        echo "üîç –ó–∞–ø—É—Å–∫ go vet..."
                        go vet ./... || echo "‚ö†Ô∏è  go vet –∑–Ω–∞–π—à–æ–≤ –ø—Ä–æ–±–ª–µ–º–∏"

                        echo "üìê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è..."
                        UNFORMATTED=$(go fmt -l . 2>/dev/null | head -10)
                        if [ -n "$UNFORMATTED" ]; then
                            echo "‚ö†Ô∏è  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏:"
                            echo "$UNFORMATTED"
                        else
                            echo "‚úÖ –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ"
                        fi

                        # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π linting
                        if command -v golangci-lint >/dev/null 2>&1; then
                            echo "üî¨ –ó–∞–ø—É—Å–∫ golangci-lint..."
                            golangci-lint run --timeout=5m --out-format=colored-line-number || echo "‚ö†Ô∏è  Linter –∑–Ω–∞–π—à–æ–≤ –ø—Ä–æ–±–ª–µ–º–∏"
                        fi
                    '''
                }
            }
        }

        stage('Tests') {
            when {
                expression {
                    sh(script: 'command -v go', returnStatus: true) == 0
                }
            }
            steps {
                timeout(time: 8, unit: 'MINUTES') {
                    script {
                        echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤..."
                        sh '''
                            mkdir -p coverage

                            echo "üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
                            echo "Git version: $(git --version)"
                            echo "SQLite3: $(sqlite3 --version 2>/dev/null || echo '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')"
                            echo "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: $(ls -la *.ini tests/*.ini 2>/dev/null || echo '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')"

                            echo "üîç –ü–æ—à—É–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤..."
                            TEST_FILES=$(find . -name "*_test.go" -type f | head -20)
                            if [ -z "$TEST_FILES" ]; then
                                echo "‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ"
                                exit 0
                            fi

                            echo "üß™ –°–ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É—î–º–æ –æ–¥–∏–Ω –ø—Ä–æ—Å—Ç–∏–π –ø–∞–∫–µ—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
                            # –ü—Ä–æ–±—É—î–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –≤–∏–≤–æ–¥–æ–º
                            if go test -v -timeout=30s ./modules/setting 2>&1 | head -10; then
                                echo "‚úÖ –ë–∞–∑–æ–≤—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–∞—Ü—é—é—Ç—å"
                            else
                                echo "üîç –¢–µ—Å—Ç—É—î–º–æ —â–µ –ø—Ä–æ—Å—Ç—ñ—à–∏–π –ø–∞–∫–µ—Ç..."
                                go test -v -timeout=30s ./modules/util 2>&1 | head -10 || echo "‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞–∑–æ–≤–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏"
                            fi

                            echo "üèÉ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤..."

                            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
                            export GITEA_CONF="${WORKSPACE}/tests/app.ini"
                            export TMPDIR="/tmp/gitea-test-${BUILD_NUMBER}"

                            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ –ø–æ –ø–∞–∫–µ—Ç–∞—Ö, —â–æ–± –∫—Ä–∞—â–µ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å
                            FAILED_PACKAGES=""
                            PASSED_PACKAGES=""

                            # –¢–µ—Å—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ø–∞–∫–µ—Ç–∏ –±–µ–∑ –º–æ–¥–µ–ª–µ–π (—è–∫—ñ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –ø–∞–¥–∞—é—Ç—å)
                            for pkg in $(go list ./... | grep -v -E "(models|integration|e2e|test/)" | head -5); do
                                echo "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è $pkg..."
                                if go test -short -timeout=2m "$pkg" 2>/dev/null; then
                                    echo "  ‚úÖ $pkg - OK"
                                    PASSED_PACKAGES="$PASSED_PACKAGES $pkg"
                                else
                                    echo "  ‚ùå $pkg - FAIL"
                                    FAILED_PACKAGES="$FAILED_PACKAGES $pkg"
                                fi
                            done

                            # –ü—Ä–æ–±—É—î–º–æ —Ç–µ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –æ–∫—Ä–µ–º–æ –∑ –±—ñ–ª—å—à –º'—è–∫–∏–º–∏ —É–º–æ–≤–∞–º–∏
                            echo "üß™ –°–ø—Ä–æ–±–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –∑ –±–∞–∑–æ–≤–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é..."
                            if go test -short -timeout=1m ./models/... 2>/dev/null | head -20; then
                                echo "‚úÖ –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–π—à–ª–∏"
                                PASSED_PACKAGES="$PASSED_PACKAGES models"
                            else
                                echo "‚ö†Ô∏è  –¢–µ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
                                FAILED_PACKAGES="$FAILED_PACKAGES models"
                            fi

                            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–ª—è –ø–∞–∫–µ—Ç—ñ–≤, —è–∫—ñ –ø—Ä–æ–π—à–ª–∏
                            if [ -n "$PASSED_PACKAGES" ]; then
                                echo "üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–ª—è —É—Å–ø—ñ—à–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤..."
                                go test -short -timeout=3m -coverprofile=coverage/coverage.out -covermode=atomic $PASSED_PACKAGES 2>/dev/null || echo "‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è"

                                if [ -f coverage/coverage.out ] && [ -s coverage/coverage.out ]; then
                                    COVERAGE=$(go tool cover -func=coverage/coverage.out 2>/dev/null | grep total | awk '{print $3}' || echo "N/A")
                                    echo "üìä –ü–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏: $COVERAGE"
                                    go tool cover -html=coverage/coverage.out -o coverage/coverage.html 2>/dev/null || echo "‚ö†Ô∏è  HTML –∑–≤—ñ—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ"
                                fi
                            fi

                            # –ü—ñ–¥—Å—É–º–æ–∫
                            echo "üìã –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
                            echo "‚úÖ –£—Å–ø—ñ—à–Ω—ñ –ø–∞–∫–µ—Ç–∏: $PASSED_PACKAGES"
                            if [ -n "$FAILED_PACKAGES" ]; then
                                echo "‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ñ –ø–∞–∫–µ—Ç–∏: $FAILED_PACKAGES"
                                echo "‚ÑπÔ∏è  –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ç–µ—Å—Ç–∞–º–∏"
                            fi

                            # –ù–µ —Ñ–µ–π–ª–∏–º–æ –∑–±—ñ—Ä–∫—É, –∞–ª–µ –ø–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω—É —è–∫—â–æ —î –ø—Ä–æ–±–ª–µ–º–∏
                            if [ -n "$FAILED_PACKAGES" ] && [ -z "$PASSED_PACKAGES" ]; then
                                echo "‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ: –∂–æ–¥–Ω—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏"
                                exit 1
                            fi
                        '''
                    }
                }
            }
            post {
                always {
                    script {
                        if (fileExists('coverage/coverage.html')) {
                            echo "üìà HTML –∑–≤—ñ—Ç –ø–æ–∫—Ä–∏—Ç—Ç—è —Å—Ç–≤–æ—Ä–µ–Ω–æ"
                        }

                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–ª–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ç–µ—Å—Ç–∞–º–∏
                        def testResult = sh(script: '''
                            if [ -f coverage/coverage.out ] && [ -s coverage/coverage.out ]; then
                                echo "tests_partial_success"
                            else
                                echo "tests_no_coverage"
                            fi
                        ''', returnStdout: true).trim()

                        if (testResult == "tests_no_coverage") {
                            unstable("–¢–µ—Å—Ç–∏ –Ω–µ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è - –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏")
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        echo "üî® –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É..."

                        def goAvailable = sh(script: 'command -v go', returnStatus: true) == 0
                        def nodeAvailable = sh(script: 'command -v npm', returnStatus: true) == 0

                        if (goAvailable) {
                            echo "üêπ –ó–±—ñ—Ä–∫–∞ Gitea backend..."
                            sh '''
                                export LDFLAGS="-X 'code.gitea.io/gitea/modules/setting.AppVer=${BUILD_VERSION}' -X 'code.gitea.io/gitea/modules/setting.AppBuiltWith=Jenkins' -s -w"

                                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Gitea –ø—Ä–æ–µ–∫—Ç—É
                                if [ -f "cmd/gitea/main.go" ]; then
                                    echo "üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ Gitea —Å—Ç—Ä—É–∫—Ç—É—Ä—É: cmd/gitea/main.go"
                                    go build -ldflags "$LDFLAGS" -tags "${BUILD_TAGS}" -o gitea ./cmd/gitea
                                elif [ -f "main.go" ] && grep -q "gitea" main.go; then
                                    echo "üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ Gitea main.go –≤ –∫–æ—Ä–µ–Ω—ñ"
                                    go build -ldflags "$LDFLAGS" -tags "${BUILD_TAGS}" -o gitea .
                                else
                                    echo "‚ùå –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ Gitea –ø—Ä–æ–µ–∫—Ç!"
                                    echo "üîç –ü–æ—à—É–∫ Go —Ñ–∞–π–ª—ñ–≤:"
                                    find . -name "*.go" -type f | head -10

                                    echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ go.mod:"
                                    if [ -f "go.mod" ]; then
                                        head -5 go.mod
                                    fi

                                    exit 1
                                fi

                                if [ -f "gitea" ]; then
                                    echo "‚úÖ Gitea –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
                                    ls -lh gitea
                                    ./gitea --version || echo "‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é"
                                else
                                    echo "‚ùå –ó–±—ñ—Ä–∫–∞ Gitea –Ω–µ –≤–¥–∞–ª–∞—Å—è"
                                    exit 1
                                fi
                            '''
                        } else {
                            echo "‚ùå Go –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π - –Ω–µ–º–æ–∂–ª–∏–≤–æ –∑—ñ–±—Ä–∞—Ç–∏ Gitea"
                            error("Go environment not available")
                        }

                        if (fileExists('package.json') && nodeAvailable) {
                            echo "üé® –ó–±—ñ—Ä–∫–∞ Gitea frontend..."
                            sh '''
                                # Gitea –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î webpack –∞–±–æ vite
                                if npm run build --silent 2>/dev/null; then
                                    echo "‚úÖ Frontend –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
                                elif npm run build:dev --silent 2>/dev/null; then
                                    echo "‚úÖ Dev frontend –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
                                else
                                    echo "‚ö†Ô∏è  Frontend –∑–±—ñ—Ä–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è, –∞–ª–µ —Ü–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ"
                                fi
                            '''
                        }
                    }
                }
            }
        }

        stage('Package') {
            when {
                expression { fileExists('gitea') }
            }
            steps {
                script {
                    echo "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤..."
                    sh '''
                        mkdir -p dist

                        # –ö–æ–ø—ñ—é—î–º–æ –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª
                        cp gitea dist/

                        # –ö–æ–ø—ñ—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏ (—è–∫—â–æ —î)
                        for dir in templates options public custom; do
                            if [ -d "$dir" ]; then
                                echo "üìÅ –ö–æ–ø—ñ—é—î–º–æ $dir/"
                                cp -r "$dir" dist/
                            fi
                        done

                        # –ö–æ–ø—ñ—é—î–º–æ –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–π–ª–∏
                        for file in README.md LICENSE CHANGELOG.md app.ini; do
                            if [ -f "$file" ]; then
                                echo "üìÑ –ö–æ–ø—ñ—é—î–º–æ $file"
                                cp "$file" dist/
                            fi
                        done

                        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä—Ö—ñ–≤
                        cd dist
                        tar -czf "gitea-${BUILD_VERSION}.tar.gz" *
                        cd ..

                        echo "üì¶ –ü–∞–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: gitea-${BUILD_VERSION}.tar.gz"
                        ls -lah dist/

                        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª
                        cat > dist/build-info.txt << EOF
Build Version: ${BUILD_VERSION}
Build Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
Git Commit: ${GIT_COMMIT_SHORT}
Jenkins Build: ${BUILD_NUMBER}
Test Status: $([ -f coverage/coverage.out ] && echo "Partial" || echo "Skipped")
EOF

                        echo "‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ –≥–æ—Ç–æ–≤—ñ"
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßπ –û—á–∏—â–µ–Ω–Ω—è..."
                sh '''
                    # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∫–µ—à –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–±—ñ—Ä–æ–∫
                    rm -f gitea
                    find . -name "*.tmp" -delete 2>/dev/null || true
                    # –û—á–∏—â–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                    rm -rf "/tmp/gitea-test-${BUILD_NUMBER}" 2>/dev/null || true
                '''
            }
        }
        success {
            script {
                echo "‚úÖ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
                echo "üìä –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${currentBuild.durationString}"

                archiveArtifacts artifacts: 'dist/*.tar.gz', fingerprint: true

                if (fileExists('coverage/coverage.out')) {
                    echo "üìà –ó–≤—ñ—Ç –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ"
                }
            }
        }
        failure {
            script {
                echo "‚ùå Pipeline –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è –Ω–∞ –µ—Ç–∞–ø—ñ: ${env.STAGE_NAME}"
                currentBuild.description = "‚ùå –ü—Ä–æ–≤–∞–ª –Ω–∞: ${env.STAGE_NAME}"
            }
        }
        unstable {
            script {
                echo "‚ö†Ô∏è  Pipeline –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏"
                currentBuild.description = "‚ö†Ô∏è  –ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞ - –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ç–µ—Å—Ç–∞–º–∏"
            }
        }
    }
}
