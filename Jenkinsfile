pipeline {
    agent any

    // –¢—Ä–∏–≥–µ—Ä–∏ - –∑–∞–ø—É—Å–∫ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø—É—à—ñ –≤ dev –≥—ñ–ª–∫—É
    triggers {
        githubPush()
    }

    // –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    environment {
        REPO_URL = 'https://github.com/Abendgast/Gitea.git'
        MAIN_BRANCH = 'main'
        DEV_BRANCH = 'dev'
        NODE_VERSION = '20'
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Node.js —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ –ø–∞–º'—è—Ç—Ç—é
        NODE_OPTIONS = '--max-old-space-size=4096'
    }

    // –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ —è–∫—ñ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ
    tools {
        nodejs "${NODE_VERSION}"
        go 'go-1.21'
    }

    stages {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥—ñ–ª–∫–∏ —Ç–∞ checkout –∫–æ–¥—É
        stage('Checkout and Validate') {
            steps {
                // Checkout –∫–æ–¥—É –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é
                checkout scm

                script {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑ dev –≥—ñ–ª–∫–æ—é
                    if (env.BRANCH_NAME != 'dev') {
                        currentBuild.result = 'ABORTED'
                        error("Pipeline –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è dev –≥—ñ–ª–∫–∏. –ü–æ—Ç–æ—á–Ω–∞ –≥—ñ–ª–∫–∞: ${env.BRANCH_NAME}")
                    }

                    echo "‚úì –ü—Ä–∞—Ü—é—î–º–æ –∑ dev –≥—ñ–ª–∫–æ—é"
                    echo "‚úì –ö–æ–¥ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"
                }
            }
        }

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
        stage('Environment Setup') {
            steps {
                sh '''
                    echo "=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ ==="
                    echo "Node.js –≤–µ—Ä—Å—ñ—è:"
                    node --version
                    echo "NPM –≤–µ—Ä—Å—ñ—è:"
                    npm --version
                    echo "Go –≤–µ—Ä—Å—ñ—è:"
                    go version

                    echo "=== –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É ==="
                    npm cache clean --force || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏ npm cache, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ..."
                '''
            }
        }

        // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        stage('Install Dependencies') {
            parallel {
                // Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
                stage('Go Dependencies') {
                    steps {
                        sh '''
                            echo "=== –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ==="
                            go mod download
                            go mod tidy
                            echo "‚úì Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                        '''
                    }
                }

                // Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (—è–∫—â–æ —î)
                stage('Node.js Dependencies') {
                    when {
                        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î package.json
                        expression { fileExists('package.json') }
                    }
                    steps {
                        sh '''
                            echo "=== –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ==="
                            npm install --legacy-peer-deps --no-audit --no-fund
                            echo "‚úì Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                        '''
                    }
                }
            }
        }

        // –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞–¥—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        stage('Run Tests') {
            parallel {
                // Backend —Ç–µ—Å—Ç–∏ (Go)
                stage('Backend Tests') {
                    steps {
                        sh '''
                            echo "=== –ó–∞–ø—É—Å–∫ backend —Ç–µ—Å—Ç—ñ–≤ ==="

                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î Makefile —Ç–∞ make test-backend
                            if [ -f "Makefile" ] && grep -q "test-backend" Makefile; then
                                make test-backend
                            else
                                # –Ø–∫—â–æ –Ω–µ–º–∞—î Makefile, –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ Go —Ç–µ—Å—Ç–∏
                                go test ./... -v
                            fi

                            echo "‚úì Backend —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
                        '''
                    }
                }

                // Frontend —Ç–µ—Å—Ç–∏ (—è–∫—â–æ —î)
                stage('Frontend Tests') {
                    when {
                        allOf {
                            expression { fileExists('package.json') }
                            expression {
                                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î test —Å–∫—Ä–∏–ø—Ç –≤ package.json
                                sh(script: 'grep -q "\\"test\\"" package.json', returnStatus: true) == 0
                            }
                        }
                    }
                    steps {
                        sh '''
                            echo "=== –ó–∞–ø—É—Å–∫ frontend —Ç–µ—Å—Ç—ñ–≤ ==="
                            npm test
                            echo "‚úì Frontend —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
                        '''
                    }
                }

                // –°—Ç–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–¥—É (–¥–æ–¥–∞—Ç–∫–æ–≤–æ)
                stage('Code Quality Check') {
                    steps {
                        sh '''
                            echo "=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É ==="

                            # Go —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                            echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Go —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è..."
                            if ! gofmt -l . | grep -v vendor | grep .; then
                                echo "‚úì Go –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ"
                            else
                                echo "‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º Go –∫–æ–¥—É"
                                exit 1
                            fi

                            # Go vet –¥–ª—è –ø–æ—à—É–∫—É –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º
                            echo "–ó–∞–ø—É—Å–∫ go vet..."
                            go vet ./...
                            echo "‚úì Go vet –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—Ä–æ–π–¥–µ–Ω–æ"
                        '''
                    }
                }
            }
        }

        // –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        stage('Build Verification') {
            steps {
                sh '''
                    echo "=== –ü–µ—Ä–µ–≤—ñ—Ä–æ—á–Ω–∞ –∑–±—ñ—Ä–∫–∞ ==="

                    # –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–±—ñ—Ä–æ–∫
                    if [ -f "Makefile" ]; then
                        make clean-all || make clean || echo "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—á–∏—Å—Ç–∏—Ç–∏, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ..."
                    fi

                    # –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É
                    if [ -f "Makefile" ] && grep -q "build" Makefile; then
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Makefile —è–∫—â–æ –≤—ñ–Ω —î
                        TAGS="bindata" make build
                    else
                        # –Ü–Ω–∞–∫—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ Go –∑–±—ñ—Ä–∫–∞
                        go build ./...
                    fi

                    echo "‚úì –ü—Ä–æ–µ–∫—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–∏—Ä–∞—î—Ç—å—Å—è"
                '''
            }
        }

        // –ú–µ—Ä–¥–∂ –≤ main –≥—ñ–ª–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏
        stage('Merge to Main') {
            when {
                // –í–∏–∫–æ–Ω—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è dev –≥—ñ–ª–∫–∏ —ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å—Ç–∞–¥—ñ—ó —É—Å–ø—ñ—à–Ω—ñ
                allOf {
                    branch 'dev'
                    expression { currentBuild.currentResult == 'SUCCESS' }
                }
            }
            steps {
                script {
                    echo "=== –ü–æ—á–∞—Ç–æ–∫ –º–µ—Ä–¥–∂—É –≤ main –≥—ñ–ª–∫—É ==="

                    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è git –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    sh '''
                        git config user.name "Jenkins CI"
                        git config user.email "jenkins@yourcompany.com"
                        git config --global user.name "Jenkins CI"
                        git config --global user.email "jenkins@yourcompany.com"
                    '''

                    // –ú–µ—Ä–¥–∂ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
                    withCredentials([usernamePassword(
                        credentialsId: 'github-credentials',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD'
                    )]) {
                        sh '''
                            echo "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è remote URL –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é..."
                            git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Abendgast/Gitea.git

                            echo "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–º—ñ–Ω..."
                            git fetch origin

                            echo "–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ main –≥—ñ–ª–∫—É..."
                            git checkout main
                            git pull origin main

                            echo "–ú–µ—Ä–¥–∂ dev –≤ main..."
                            git merge origin/dev --no-ff -m "üöÄ Auto merge from dev branch via Jenkins CI

                            ‚úÖ All tests passed
                            üìù Commit: $(git log --oneline -1 origin/dev)
                            üïê Merged at: $(date)
                            "

                            echo "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–º—ñ–Ω..."
                            git push origin main

                            echo "‚úì –ú–µ—Ä–¥–∂ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
                        '''
                    }
                }
            }
        }
    }

    // –ü–æ—Å—Ç-–¥—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    post {
        success {
            script {
                if (env.BRANCH_NAME == 'dev') {
                    echo '''
                    üéâ –£–°–ü–Ü–•!
                    ‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ
                    üîÑ –ó–º—ñ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º–µ—Ä–∂–µ–Ω–æ –≤ main –≥—ñ–ª–∫—É
                    üöÄ –î–µ–ø–ª–æ–π –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É
                    '''
                } else {
                    echo '‚úÖ Pipeline –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!'
                }
            }
        }

        failure {
            echo '''
            ‚ùå –ü–û–ú–ò–õ–ö–ê!
            üö´ Pipeline –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é
            üîí –ó–º—ñ–Ω–∏ –ù–ï –±—É–ª–∏ –∑–º–µ—Ä–∂–µ–Ω–æ –≤ main
            üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
            '''
        }

        unstable {
            echo '''
            ‚ö†Ô∏è  –ù–ï–°–¢–ê–ë–Ü–õ–¨–ù–ò–ô –°–¢–ê–ù!
            üîÑ –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏
            üîí –ú–µ—Ä–¥–∂ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            '''
        }

        always {
            // –ó–∞–≤–∂–¥–∏ –æ—á–∏—â—É—î–º–æ —Ä–æ–±–æ—á–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä
            echo "üßπ –û—á–∏—â–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É..."
            cleanWs()
        }
    }
}
