pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 20, unit: 'MINUTES')
        skipStagesAfterUnstable()
        ansiColor('xterm')
    }

    environment {
        GO_VERSION = '1.21'
        NODE_VERSION = '18'
        GOPROXY = 'https://proxy.golang.org,direct'
        CGO_ENABLED = '1'
        BUILD_TAGS = 'sqlite sqlite_unlock_notify'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "üîÑ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–¥—É..."
                    checkout scm
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    env.BUILD_VERSION = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                }
            }
        }

        stage('Setup Environment') {
            parallel {
                stage('Go Setup') {
                    steps {
                        script {
                            echo "üêπ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Go —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
                            sh '''
                                go version
                                go env GOOS GOARCH
                                mkdir -p .cache/go-build
                                export GOCACHE=$(pwd)/.cache/go-build
                            '''
                        }
                    }
                }
                stage('Node Setup') {
                    steps {
                        script {
                            echo "üì¶ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Node.js..."
                            sh '''
                                node --version
                                npm --version
                                npm config set cache .cache/npm --global
                            '''
                        }
                    }
                }
            }
        }

        stage('Dependencies') {
            parallel {
                stage('Go Dependencies') {
                    steps {
                        script {
                            echo "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
                            sh '''
                                export GOCACHE=$(pwd)/.cache/go-build
                                go mod download
                                go mod verify
                            '''
                        }
                    }
                }
                stage('Frontend Dependencies') {
                    when {
                        expression { fileExists('package.json') }
                    }
                    steps {
                        script {
                            echo "üé® –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è frontend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
                            sh '''
                                npm ci --silent --no-progress
                            '''
                        }
                    }
                }
            }
        }

        stage('Code Quality') {
            parallel {
                stage('Lint Go') {
                    steps {
                        script {
                            echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Go –∫–æ–¥—É..."
                            sh '''
                                if command -v golangci-lint >/dev/null 2>&1; then
                                    golangci-lint run --timeout=10m --out-format=colored-line-number
                                else
                                    echo "‚ö†Ô∏è  golangci-lint –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ"
                                    go vet ./...
                                    go fmt -l . | (! grep .) || (echo "‚ùå –ö–æ–¥ –Ω–µ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ" && exit 1)
                                fi
                            '''
                        }
                    }
                }
                stage('Security Scan') {
                    steps {
                        script {
                            echo "üîí –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏..."
                            sh '''
                                if command -v gosec >/dev/null 2>&1; then
                                    gosec -quiet -fmt=colored ./...
                                else
                                    echo "‚ö†Ô∏è  gosec –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ scan"
                                fi
                            '''
                        }
                    }
                }
            }
        }

        stage('Tests') {
            steps {
                script {
                    echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤..."
                    sh '''
                        export GOCACHE=$(pwd)/.cache/go-build
                        mkdir -p coverage

                        go test -v -race -coverprofile=coverage/coverage.out -covermode=atomic ./... | \
                        grep -E "(PASS|FAIL|===|---)" | \
                        sed 's/^/    /'

                        if [ -f coverage/coverage.out ]; then
                            COVERAGE=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print $3}')
                            echo "üìä –ü–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏: $COVERAGE"
                        fi
                    '''
                }
            }
            post {
                always {
                    script {
                        if (fileExists('coverage/coverage.out')) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'coverage',
                                reportFiles: 'coverage.html',
                                reportName: 'Coverage Report'
                            ])
                        }
                    }
                }
            }
        }

        stage('Build') {
            parallel {
                stage('Backend Build') {
                    steps {
                        script {
                            echo "üî® –ó–±—ñ—Ä–∫–∞ backend..."
                            sh '''
                                export GOCACHE=$(pwd)/.cache/go-build
                                export LDFLAGS="-X 'main.Version=${BUILD_VERSION}' -X 'main.BuildTime=$(date -u '+%Y-%m-%d %H:%M:%S UTC')' -s -w"

                                go build -ldflags "$LDFLAGS" -tags "${BUILD_TAGS}" -o gitea ./cmd/gitea

                                echo "‚úÖ Backend –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
                                ls -lh gitea
                            '''
                        }
                    }
                }
                stage('Frontend Build') {
                    when {
                        expression { fileExists('package.json') }
                    }
                    steps {
                        script {
                            echo "üé® –ó–±—ñ—Ä–∫–∞ frontend..."
                            sh '''
                                npm run build --silent
                                echo "‚úÖ Frontend –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
                            '''
                        }
                    }
                }
            }
        }

        stage('Package') {
            steps {
                script {
                    echo "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤..."
                    sh '''
                        mkdir -p dist

                        # –ö–æ–ø—ñ—é—î–º–æ –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª
                        cp gitea dist/

                        # –ö–æ–ø—ñ—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏
                        if [ -d "templates" ]; then cp -r templates dist/; fi
                        if [ -d "options" ]; then cp -r options dist/; fi
                        if [ -d "public" ]; then cp -r public dist/; fi

                        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä—Ö—ñ–≤
                        cd dist
                        tar -czf gitea-${BUILD_VERSION}.tar.gz *
                        cd ..

                        echo "üì¶ –ü–∞–∫–µ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: gitea-${BUILD_VERSION}.tar.gz"
                        ls -lh dist/
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßπ –û—á–∏—â–µ–Ω–Ω—è..."
                sh '''
                    # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∫–µ—à –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–±—ñ—Ä–æ–∫
                    rm -f gitea
                    find . -name "*.tmp" -delete 2>/dev/null || true
                '''
            }
        }
        success {
            script {
                echo "‚úÖ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
                echo "üìä –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${currentBuild.durationString}"

                archiveArtifacts artifacts: 'dist/*.tar.gz', fingerprint: true

                if (fileExists('coverage/coverage.out')) {
                    echo "üìà –ó–≤—ñ—Ç –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ"
                }
            }
        }
        failure {
            script {
                echo "‚ùå Pipeline –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è –Ω–∞ –µ—Ç–∞–ø—ñ: ${env.STAGE_NAME}"
                currentBuild.description = "‚ùå –ü—Ä–æ–≤–∞–ª –Ω–∞: ${env.STAGE_NAME}"
            }
        }
        unstable {
            script {
                echo "‚ö†Ô∏è  Pipeline –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏"
                currentBuild.description = "‚ö†Ô∏è  –ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞"
            }
        }
    }
}
