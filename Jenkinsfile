pipeline {
    agent { label 'gitea-agent' }

    options {
        ansiColor('xterm')
        timestamps()
        skipDefaultCheckout(true)
    }

    environment {
        GO111MODULE = 'on'
        GOPATH = "${WORKSPACE}/go"
        GOCACHE = "${WORKSPACE}/.cache/go-build"
        ARTIFACTS_DIR = "artifacts"
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
                echo '‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –æ—Ç—Ä–∏–º–∞–Ω–æ.'
            }
        }

        stage('Setup Go') {
            steps {
                sh '''
                    echo "üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Go-—Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
                    mkdir -p ${GOPATH} ${GOCACHE} ${ARTIFACTS_DIR}
                    export PATH=$PATH:/usr/local/go/bin
                    go version
                '''
            }
        }

        stage('Lint') {
            steps {
                sh '''
                    echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É..."
                    if ! command -v golint &> /dev/null; then
                        echo "‚è¨ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è golint..."
                        go install golang.org/x/lint/golint@latest
                    fi
                    golint ./... | tee ${ARTIFACTS_DIR}/golint-report.txt
                '''
            }
        }

        stage('Build') {
            steps {
                sh '''
                    echo "‚öôÔ∏è –ó–±—ñ—Ä–∫–∞..."
                    go build -v -o ${ARTIFACTS_DIR}/gitea-app ./...
                '''
            }
        }

        stage('Test') {
            steps {
                sh '''
                    echo "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è..."
                    go test -v -cover ./... | tee ${ARTIFACTS_DIR}/test-report.txt
                '''
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: '${ARTIFACTS_DIR}/*', onlyIfSuccessful: true
                echo 'üì¶ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ CI –∑–±–µ—Ä–µ–∂–µ–Ω–æ.'
            }
        }
    }

    post {
        success {
            echo '‚úÖ CI –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.'
        }
        failure {
            echo '‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ CI.'
        }
        always {
            cleanWs()
            echo 'üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.'
        }
    }
}

