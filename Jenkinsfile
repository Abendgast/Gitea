pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        REPO_URL = 'https://github.com/Abendgast/Gitea.git'
        MAIN_BRANCH = 'main'
        DEV_BRANCH = 'dev'
        NODE_VERSION = '20'
        NODE_OPTIONS = '--max-old-space-size=4096'
        GIT_TIMEOUT = '300'
    }

    tools {
        nodejs "${NODE_VERSION}"
        go 'go-1.21'
    }

    stages {
        stage('Checkout and Validate') {
            steps {
                script {
                    if (env.BRANCH_NAME != 'dev') {
                        currentBuild.result = 'ABORTED'
                        error("Pipeline –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è dev –≥—ñ–ª–∫–∏. –ü–æ—Ç–æ—á–Ω–∞ –≥—ñ–ª–∫–∞: ${env.BRANCH_NAME}")
                    }

                    echo "‚úì –ü—Ä–∞—Ü—é—î–º–æ –∑ dev –≥—ñ–ª–∫–æ—é: ${env.BRANCH_NAME}"
                    echo "‚úì –ö–æ–¥ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ"

                    def commitInfo = sh(
                        script: 'git log -1 --pretty=format:"%h - %s (%an, %ad)" --date=short',
                        returnStdout: true
                    ).trim()
                    echo "üìù –ü–æ—Ç–æ—á–Ω–∏–π commit: ${commitInfo}"
                }
            }
        }

        stage('Quick Change Analysis') {
            steps {
                script {
                    echo "=== –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω ==="

                    def changedFiles = sh(
                        script: 'git diff --name-only HEAD~1 HEAD',
                        returnStdout: true
                    ).trim()

                    if (!changedFiles) {
                        echo "‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω —É –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –∫–æ–º–º–∏—Ç—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –∫–æ–º–º—ñ—Ç–∏..."
                        changedFiles = sh(
                            script: 'git diff --name-only HEAD~3 HEAD',
                            returnStdout: true
                        ).trim()
                    }

                    echo "üìÇ –ó–º—ñ–Ω–µ–Ω—ñ —Ñ–∞–π–ª–∏:"
                    echo changedFiles

                    writeFile file: 'changed_files.txt', text: changedFiles

                    def filesList = changedFiles ? changedFiles.split('\n') : []
                    def goFiles = filesList.findAll { it && it.endsWith('.go') }
                    def jsFiles = filesList.findAll { it && it.matches('.*\\.(js|ts|vue)$') }
                    def configFiles = filesList.findAll { it && it.matches('.*\\.(yml|yaml|json|toml|env)$') }
                    def dockerFiles = filesList.findAll { it && it.matches('.*(Dockerfile|docker-compose).*') }

                    writeFile file: 'changed_go_files.txt', text: goFiles.join('\n')
                    writeFile file: 'changed_js_files.txt', text: jsFiles.join('\n')
                    writeFile file: 'changed_config_files.txt', text: configFiles.join('\n')
                    writeFile file: 'changed_docker_files.txt', text: dockerFiles.join('\n')

                    echo "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É:"
                    echo "   Go —Ñ–∞–π–ª—ñ–≤: ${goFiles.size()}"
                    echo "   JS/TS —Ñ–∞–π–ª—ñ–≤: ${jsFiles.size()}"
                    echo "   Config —Ñ–∞–π–ª—ñ–≤: ${configFiles.size()}"
                    echo "   Docker —Ñ–∞–π–ª—ñ–≤: ${dockerFiles.size()}"

                    env.GO_FILES_COUNT = goFiles.size().toString()
                    env.JS_FILES_COUNT = jsFiles.size().toString()
                    env.CONFIG_FILES_COUNT = configFiles.size().toString()
                    env.DOCKER_FILES_COUNT = dockerFiles.size().toString()
                    env.TOTAL_FILES_COUNT = filesList.size().toString()

                    env.CHANGED_FILES_LIST = changedFiles
                }
            }
        }

        stage('Smart Testing Strategy') {
            steps {
                script {
                    def goCount = env.GO_FILES_COUNT.toInteger()
                    def jsCount = env.JS_FILES_COUNT.toInteger()
                    def configCount = env.CONFIG_FILES_COUNT.toInteger()
                    def dockerCount = env.DOCKER_FILES_COUNT.toInteger()
                    def totalCount = env.TOTAL_FILES_COUNT.toInteger()

                    def testStrategy = 'minimal'
                    def skipTests = false

                    echo "üìä –ê–Ω–∞–ª—ñ–∑ –¥–ª—è –≤–∏–±–æ—Ä—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó:"
                    echo "   –ó–∞–≥–∞–ª—å–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${totalCount}"
                    echo "   Go —Ñ–∞–π–ª—ñ–≤: ${goCount}"
                    echo "   Config —Ñ–∞–π–ª—ñ–≤: ${configCount}"

                    if (totalCount == 0) {
                        skipTests = true
                        echo "‚ÑπÔ∏è –ù–µ–º–∞—î –∑–º—ñ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏"
                    } else {
                        def changedFilesFromEnv = env.CHANGED_FILES_LIST ?: ''
                        def onlyDocs = false

                        if (changedFilesFromEnv) {
                            def filesList = changedFilesFromEnv.split('\n')
                            onlyDocs = filesList.every { file ->
                                file && (file.matches('.*\\.(md|txt|rst|doc)$') || file.startsWith('docs/'))
                            }
                        }

                        if (onlyDocs) {
                            skipTests = true
                            echo "üìö –ó–º—ñ–Ω–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏"
                        }
                    }

                    if (!skipTests) {
                        def changedFilesContent = env.CHANGED_FILES_LIST ?: ''

                        if (changedFilesContent.contains('main.go') || configCount > 0 || dockerCount > 0) {
                            testStrategy = 'core'
                            echo "üî• Core –∑–º—ñ–Ω–∏ –≤–∏—è–≤–ª–µ–Ω–æ - core —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                        } else if (changedFilesContent.contains('models/') || changedFilesContent.contains('services/')) {
                            testStrategy = 'extended'
                            echo "üöÄ –ó–º—ñ–Ω–∏ –≤ –º–æ–¥–µ–ª—è—Ö/—Å–µ—Ä–≤—ñ—Å–∞—Ö - extended —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                        } else if (goCount > 5 || totalCount > 15) {
                            testStrategy = 'extended'
                            echo "üìà –ë–∞–≥–∞—Ç–æ –∑–º—ñ–Ω - extended —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                        } else if (goCount > 0) {
                            testStrategy = 'targeted'
                            echo "üéØ –¶—ñ–ª—å–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–µ–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤"
                        }
                    }

                    env.TEST_STRATEGY = testStrategy
                    env.SKIP_TESTS = skipTests.toString()

                    echo ">>> –û–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: ${testStrategy} (–ø—Ä–æ–ø—É—Å–∫: ${skipTests}) <<<"
                }
            }
        }

        stage('Environment Setup') {
            when {
                expression { env.SKIP_TESTS != 'true' }
            }
            steps {
                sh '''
                    echo "=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ ==="
                    echo "Node.js: $(node --version)"
                    echo "NPM: $(npm --version)"
                    echo "Go: $(go version)"

                    echo "=== –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É ==="
                    npm cache clean --force 2>/dev/null || echo "NPM cache –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ"
                    go clean -cache -modcache -testcache 2>/dev/null || echo "Go cache –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ"
                '''
            }
        }

        stage('Install Dependencies') {
            when {
                expression { env.SKIP_TESTS != 'true' }
            }
            parallel {
                stage('Go Dependencies') {
                    when {
                        expression { env.GO_FILES_COUNT.toInteger() > 0 }
                    }
                    steps {
                        timeout(time: 5, unit: 'MINUTES') {
                            sh '''
                                echo "=== –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ==="
                                go mod download -x
                                go mod tidy
                                echo "‚úì Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                            '''
                        }
                    }
                }

                stage('Node.js Dependencies') {
                    when {
                        allOf {
                            expression { fileExists('package.json') }
                            expression { env.JS_FILES_COUNT.toInteger() > 0 }
                        }
                    }
                    steps {
                        timeout(time: 5, unit: 'MINUTES') {
                            sh '''
                                echo "=== –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π ==="
                                npm ci --legacy-peer-deps --no-audit --no-fund --silent
                                echo "‚úì Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                            '''
                        }
                    }
                }
            }
        }

        stage('Smart Tests Execution') {
            when {
                expression { env.SKIP_TESTS != 'true' }
            }
            parallel {
                stage('Backend Tests') {
                    when {
                        expression { env.GO_FILES_COUNT.toInteger() > 0 }
                    }
                    steps {
                        timeout(time: 15, unit: 'MINUTES') {
                            script {
                                def strategy = env.TEST_STRATEGY
                                echo "üß™ –ó–∞–ø—É—Å–∫ backend —Ç–µ—Å—Ç—ñ–≤ (—Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: ${strategy})"

                                sh '''
                                    case "${TEST_STRATEGY}" in
                                        "minimal"|"targeted")
                                            echo "üéØ –¶—ñ–ª—å–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                                            if [ -f "changed_go_files.txt" ]; then
                                                CHANGED_GO_FILES=$(cat changed_go_files.txt | grep -v "^$" || true)
                                                if [ -n "$CHANGED_GO_FILES" ]; then
                                                    echo "–¢–µ—Å—Ç—É—î–º–æ –ø–∞–∫–µ—Ç–∏ –∑—ñ –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:"
                                                    echo "$CHANGED_GO_FILES" | while read -r file; do
                                                        if [ -n "$file" ]; then
                                                            PKG_DIR=$(dirname "$file")
                                                            if [ "$PKG_DIR" != "." ]; then
                                                                echo "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ./$PKG_DIR"
                                                                timeout 5m go test "./$PKG_DIR" -v -timeout=3m || echo "‚ö†Ô∏è –¢–µ—Å—Ç–∏ –¥–ª—è $PKG_DIR –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º"
                                                            fi
                                                        fi
                                                    done
                                                else
                                                    echo "–ù–µ–º–∞—î Go —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                                                fi
                                            else
                                                echo "–§–∞–π–ª changed_go_files.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                                            fi
                                        ;;
                                        "core")
                                            echo "üî• Core —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                                            timeout 8m go test ./cmd/... -v -timeout=5m || echo "‚ö†Ô∏è CMD —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                            timeout 5m go test ./modules/setting/... -v -timeout=3m || echo "‚ö†Ô∏è Setting —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                            timeout 3m go test ./modules/log/... -v -timeout=2m || echo "‚ö†Ô∏è Log —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                        ;;
                                        "extended")
                                            echo "üöÄ –†–æ–∑—à–∏—Ä–µ–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                                            timeout 10m go test ./models/... -v -timeout=5m -parallel=2 || echo "‚ö†Ô∏è Models —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                            timeout 10m go test ./services/... -v -timeout=5m -parallel=2 || echo "‚ö†Ô∏è Services —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                            timeout 8m go test ./modules/... -v -timeout=5m -parallel=2 || echo "‚ö†Ô∏è Modules —Ç–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å"
                                        ;;
                                    esac

                                    echo "‚úÖ Backend —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
                                '''
                            }
                        }
                    }
                }

                stage('Frontend Tests & Quality') {
                    when {
                        allOf {
                            expression { fileExists('package.json') }
                            expression { env.JS_FILES_COUNT.toInteger() > 0 }
                        }
                    }
                    steps {
                        timeout(time: 10, unit: 'MINUTES') {
                            script {
                                echo "=== Frontend —Ç–µ—Å—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ ==="

                                def hasTests = false
                                try {
                                    hasTests = sh(script: 'grep -q "\\"test\\"" package.json', returnStatus: true) == 0
                                } catch(Exception e) {
                                    hasTests = false
                                }

                                def hasEslint = false
                                try {
                                    hasEslint = sh(script: 'grep -q "eslint" package.json', returnStatus: true) == 0
                                } catch(Exception e) {
                                    hasEslint = false
                                }

                                def frontendErrors = []

                                if (hasTests) {
                                    echo "üß™ –ó–∞–ø—É—Å–∫ frontend —Ç–µ—Å—Ç—ñ–≤..."
                                    def testResult = sh(
                                        script: 'npm test -- --watchAll=false --passWithNoTests --silent 2>&1',
                                        returnStatus: true
                                    )

                                    if (testResult != 0) {
                                        def testOutput = sh(
                                            script: 'npm test -- --watchAll=false --passWithNoTests 2>&1 || true',
                                            returnStdout: true
                                        ).trim()
                                        frontendErrors.add("‚ùå Frontend —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ñ:\n${testOutput}")
                                    } else {
                                        echo "‚úÖ Frontend —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ"
                                    }
                                } else {
                                    echo "üìù –¢–µ—Å—Ç–∏ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –≤ package.json"
                                }

                                if (hasEslint) {
                                    echo "üîç –ó–∞–ø—É—Å–∫ ESLint..."

                                    if (fileExists('changed_js_files.txt')) {
                                        def changedJsFiles = readFile('changed_js_files.txt').trim()
                                        if (changedJsFiles) {
                                            def jsFilesList = changedJsFiles.split('\n').findAll { it.trim() }

                                            for (jsFile in jsFilesList) {
                                                if (jsFile.trim() && fileExists(jsFile.trim())) {
                                                    def lintResult = sh(
                                                        script: "npx eslint '${jsFile}' --format=compact 2>&1 || true",
                                                        returnStdout: true
                                                    ).trim()

                                                    if (lintResult && lintResult.contains('error')) {
                                                        frontendErrors.add("üîç ESLint –ø–æ–º–∏–ª–∫–∏ –≤ ${jsFile}:\n${lintResult}")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    echo "üìù ESLint –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"
                                }

                                if (fileExists('changed_js_files.txt')) {
                                    def changedJsFiles = readFile('changed_js_files.txt').trim()
                                    if (changedJsFiles) {
                                        def jsFilesList = changedJsFiles.split('\n').findAll { it.trim() }

                                        echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É ${jsFilesList.size()} JS/TS —Ñ–∞–π–ª—ñ–≤..."

                                        for (jsFile in jsFilesList) {
                                            if (jsFile.trim() && fileExists(jsFile.trim())) {
                                                def syntaxCheck = sh(
                                                    script: "node --check '${jsFile}' 2>&1 || true",
                                                    returnStdout: true
                                                ).trim()

                                                if (syntaxCheck && syntaxCheck.contains('SyntaxError')) {
                                                    frontendErrors.add("‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ ${jsFile}:\n${syntaxCheck}")
                                                }

                                                def fileContent = readFile(jsFile)
                                                def issues = []

                                                if (fileContent.contains('console.log') && !jsFile.contains('test')) {
                                                    issues.add("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è console.log –≤ –ø—Ä–æ–¥ –∫–æ–¥—ñ")
                                                }

                                                if (fileContent.contains('debugger')) {
                                                    issues.add("–ó–∞–ª–∏—à–µ–Ω–æ debugger statement")
                                                }

                                                if (fileContent.contains('TODO') || fileContent.contains('FIXME')) {
                                                    issues.add("–ó–Ω–∞–π–¥–µ–Ω–æ TODO/FIXME –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ")
                                                }

                                                if (issues) {
                                                    frontendErrors.add("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ —è–∫–æ—Å—Ç—ñ –≤ ${jsFile}:\n  - ${issues.join('\n  - ')}")
                                                }
                                            }
                                        }
                                    }
                                }

                                if (frontendErrors) {
                                    echo "\n" + "="*50
                                    echo "‚ùå FRONTEND –ü–ï–†–ï–í–Ü–†–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê!"
                                    echo "="*50
                                    frontendErrors.each { msg ->
                                        echo msg
                                        echo "-" * 30
                                    }
                                    echo "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:"
                                    echo "1. –í–∏–ø—Ä–∞–≤—Ç–µ –≤—Å—ñ ESLint –ø–æ–º–∏–ª–∫–∏"
                                    echo "2. –£–±–µ—Ä—ñ—Ç—å console.log —Ç–∞ debugger"
                                    echo "3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ"
                                    echo "4. –í–∏–ø—Ä–∞–≤—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏\n"

                                    currentBuild.result = 'UNSTABLE'
                                    error("‚ùå Frontend –∫–æ–¥ –Ω–µ –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —è–∫–æ—Å—Ç—ñ")
                                } else {
                                    echo "‚úÖ Frontend –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!"
                                }
                            }
                        }
                    }
                }

                stage('Code Quality Check') {
                    steps {
                        timeout(time: 5, unit: 'MINUTES') {
                            script {
                                echo "=== –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É ==="

                                def qualityCheckFailed = false
                                def errorMessages = []

                                if (fileExists('changed_go_files.txt')) {
                                    def changedGoFiles = readFile('changed_go_files.txt').trim()
                                    if (changedGoFiles) {
                                        def goFilesList = changedGoFiles.split('\n').findAll { it.trim() }

                                        echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ${goFilesList.size()} Go —Ñ–∞–π–ª—ñ–≤..."

                                        for (goFile in goFilesList) {
                                            if (goFile.trim() && fileExists(goFile.trim())) {
                                                echo "üìÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—É: ${goFile}"

                                                def syntaxCheck = sh(
                                                    script: "gofmt -e '${goFile}' > /dev/null 2>&1",
                                                    returnStatus: true
                                                )

                                                if (syntaxCheck != 0) {
                                                    def syntaxError = sh(
                                                        script: "gofmt -e '${goFile}' 2>&1 || true",
                                                        returnStdout: true
                                                    ).trim()
                                                    errorMessages.add("‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ ${goFile}:\n${syntaxError}")
                                                    qualityCheckFailed = true
                                                    continue
                                                }

                                                def formatCheck = sh(
                                                    script: "gofmt -l '${goFile}'",
                                                    returnStdout: true
                                                ).trim()

                                                if (formatCheck) {
                                                    errorMessages.add("‚ö†Ô∏è –§–∞–π–ª ${goFile} –Ω–µ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –∑–≥—ñ–¥–Ω–æ –∑ gofmt")
                                                    def formatDiff = sh(
                                                        script: "gofmt -d '${goFile}' 2>/dev/null || echo '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä—ñ–∑–Ω–∏—Ü—é'",
                                                        returnStdout: true
                                                    ).trim()
                                                    if (formatDiff) {
                                                        errorMessages.add("–†—ñ–∑–Ω–∏—Ü—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:\n${formatDiff}")
                                                    }
                                                    qualityCheckFailed = true
                                                }

                                                def fileContent = readFile(goFile)
                                                def issues = []

                                                if (fileContent.contains('panic(') && !fileContent.contains('recover()')) {
                                                    issues.add("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è panic() –±–µ–∑ recover()")
                                                }

                                                if (fileContent.contains('TODO') || fileContent.contains('FIXME')) {
                                                    issues.add("–ó–Ω–∞–π–¥–µ–Ω–æ TODO/FIXME –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ")
                                                }

                                                if (!goFile.contains('main.go') && !goFile.contains('_test.go')) {
                                                    if (fileContent.contains('fmt.Print')) {
                                                        issues.add("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è fmt.Print* –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–¥—ñ")
                                                    }
                                                }

                                                if (issues) {
                                                    errorMessages.add("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ —è–∫–æ—Å—Ç—ñ –≤ ${goFile}:\n  - ${issues.join('\n  - ')}")
                                                }

                                                echo "‚úÖ ${goFile} - –±–∞–∑–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—Ä–æ–π–¥–µ–Ω–æ"
                                            } else {
                                                echo "‚ö†Ô∏è –§–∞–π–ª ${goFile} –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π"
                                            }
                                        }

                                        echo "üî¨ –ó–∞–ø—É—Å–∫ go vet –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É..."
                                        def vetResult = sh(
                                            script: '''
                                                go vet ./... 2>&1 || true
                                            ''',
                                            returnStdout: true
                                        ).trim()

                                        if (vetResult && !vetResult.contains('no Go files')) {
                                            def vetErrors = vetResult.split('\n').findAll { line ->
                                                goFilesList.any { goFile -> line.contains(goFile) }
                                            }

                                            if (vetErrors) {
                                                errorMessages.add("üî¨ Go vet –∑–Ω–∞–π—à–æ–≤ –ø—Ä–æ–±–ª–µ–º–∏:\n${vetErrors.join('\n')}")
                                                qualityCheckFailed = true
                                            }
                                        }

                                    } else {
                                        echo "üìù –ù–µ–º–∞—î Go —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
                                    }
                                } else {
                                    echo "üìù –§–∞–π–ª changed_go_files.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
                                }

                                if (qualityCheckFailed) {
                                    echo "\n" + "="*50
                                    echo "‚ùå –ü–ï–†–ï–í–Ü–†–ö–ê –Ø–ö–û–°–¢–Ü –ö–û–î–£ –ü–†–û–í–ê–õ–ï–ù–ê!"
                                    echo "="*50
                                    errorMessages.each { msg ->
                                        echo msg
                                        echo "-" * 30
                                    }
                                    echo "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:"
                                    echo "1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å 'gofmt -w .' –¥–ª—è –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è"
                                    echo "2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å 'go vet ./...' –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"
                                    echo "3. –í–∏–ø—Ä–∞–≤—Ç–µ –≤—Å—ñ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏"
                                    echo "4. –£–±–µ—Ä—ñ—Ç—å debug –∫–æ–¥ —Ç–∞ TODO –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ\n"

                                    currentBuild.result = 'UNSTABLE'
                                    error("‚ùå –ö–æ–¥ –Ω–µ –ø—Ä–æ–π—à–æ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —è–∫–æ—Å—Ç—ñ. –î–∏–≤. –¥–µ—Ç–∞–ª—ñ –≤–∏—â–µ.")
                                } else {
                                    echo "‚úÖ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è–∫–æ—Å—Ç—ñ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Safe Merge to Main') {
            when {
                allOf {
                    branch 'dev'
                    expression {
                        return currentBuild.currentResult == 'SUCCESS'
                    }
                }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        echo "=== –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –º–µ—Ä–¥–∂—É –≤ main ==="

                        sh '''
                            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è git
                            git config user.name "Jenkins CI"
                            git config user.email "jenkins@yourcompany.com"

                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
                            echo "=== –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω Git ==="
                            echo "–ü–æ—Ç–æ—á–Ω–∞ –≥—ñ–ª–∫–∞: $(git branch --show-current || echo '–Ω–µ–≤—ñ–¥–æ–º–æ')"
                            echo "–û—Å—Ç–∞–Ω–Ω—ñ–π commit: $(git log -1 --oneline || echo '–Ω–µ–º–∞—î –∫–æ–º–º—ñ—Ç—ñ–≤')"
                            echo "–í—Å—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –≥—ñ–ª–∫–∏:"
                            git branch || echo "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ª–æ–∫–∞–ª—å–Ω–∏—Ö –≥—ñ–ª–æ–∫"
                            echo "Remote –≥—ñ–ª–∫–∏:"
                            git branch -r || echo "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è remote –≥—ñ–ª–æ–∫"
                            echo "Remote URLs:"
                            git remote -v || echo "–ù–µ–º–∞—î remote —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó–≤"
                        '''

                        withCredentials([usernamePassword(
                            credentialsId: 'github-credentials',
                            usernameVariable: 'GIT_USERNAME',
                            passwordVariable: 'GIT_PASSWORD'
                        )]) {
                            sh '''
                                set -e # –ó—É–ø–∏–Ω–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ

                                echo "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è remote –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é..."
                                git remote set-url origin "https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Abendgast/Gitea.git"

                                echo "üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –≥—ñ–ª–æ–∫ –∑ remote..."
                                # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è fetch
                                timeout ${GIT_TIMEOUT}s git fetch origin --prune || {
                                    echo "‚ùå Timeout –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ fetch"
                                    exit 1
                                }

                                # –î–æ–¥–∞—Ç–∫–æ–≤–æ fetch –≤—Å—ñ—Ö remote –≥—ñ–ª–æ–∫
                                timeout ${GIT_TIMEOUT}s git fetch origin '+refs/heads/*:refs/remotes/origin/*' --prune || {
                                    echo "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ fetch –≤—Å—ñ—Ö –≥—ñ–ª–æ–∫, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ..."
                                }

                                # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –æ—Ç—Ä–∏–º–∞–ª–∏
                                echo "üìã –î–æ—Å—Ç—É–ø–Ω—ñ remote –≥—ñ–ª–∫–∏ –ø—ñ—Å–ª—è fetch:"
                                git branch -r

                                echo "üîç –ü–æ—à—É–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó –≥—ñ–ª–∫–∏ (main/master)..."
                                MAIN_BRANCH_NAME=""
                                if git ls-remote --heads origin main | grep -q refs/heads/main; then
                                    MAIN_BRANCH_NAME="main"
                                    echo "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ remote –≥—ñ–ª–∫—É main"
                                elif git ls-remote --heads origin master | grep -q refs/heads/master; then
                                    MAIN_BRANCH_NAME="master"
                                    echo "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ remote –≥—ñ–ª–∫—É master"
                                else
                                    echo "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω—É –≥—ñ–ª–∫—É (main/master)!"
                                    echo "–î–æ—Å—Ç—É–ø–Ω—ñ remote –≥—ñ–ª–∫–∏:"
                                    git ls-remote --heads origin
                                    exit 1
                                fi

                                echo "üîÑ –†–æ–±–æ—Ç–∞ –∑ –≥—ñ–ª–∫–æ—é ${MAIN_BRANCH_NAME}..."

                                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ª–æ–∫–∞–ª—å–Ω–∞ –≥—ñ–ª–∫–∞
                                if git show-ref --verify --quiet "refs/heads/${MAIN_BRANCH_NAME}"; then
                                    echo "–õ–æ–∫–∞–ª—å–Ω–∞ –≥—ñ–ª–∫–∞ ${MAIN_BRANCH_NAME} —ñ—Å–Ω—É—î"
                                    git checkout "${MAIN_BRANCH_NAME}"
                                    git reset --hard "origin/${MAIN_BRANCH_NAME}"
                                    echo "–ì—ñ–ª–∫–∞ ${MAIN_BRANCH_NAME} –æ–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ —Å—Ç–∞–Ω—É origin/${MAIN_BRANCH_NAME}"
                                else
                                    echo "–°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É –≥—ñ–ª–∫—É ${MAIN_BRANCH_NAME}"
                                    git checkout -b "${MAIN_BRANCH_NAME}" "origin/${MAIN_BRANCH_NAME}"
                                    echo "–ì—ñ–ª–∫–∞ ${MAIN_BRANCH_NAME} —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ origin/${MAIN_BRANCH_NAME}"
                                fi

                                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
                                echo "üìç –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è checkout:"
                                echo "–ì—ñ–ª–∫–∞: $(git branch --show-current)"
                                echo "Commit: $(git log -1 --oneline)"

                                echo "üîÄ –ú–µ—Ä–¥–∂ dev –≤ ${MAIN_BRANCH_NAME}..."
                                COMMIT_MSG=$(git log --oneline -1 origin/dev | head -c 50)
                                MERGE_MSG="üöÄ Auto merge from dev branch via Jenkins CI

‚úÖ Tests passed (strategy: ${TEST_STRATEGY})
üìù Latest commit: ${COMMIT_MSG}...
üîß Files changed: ${TOTAL_FILES_COUNT} (${GO_FILES_COUNT} Go, ${JS_FILES_COUNT} JS, ${CONFIG_FILES_COUNT} Config)
üïê Merged at: $(date)
ü§ñ Jenkins build: ${BUILD_NUMBER}"

                                git merge "origin/dev" --no-ff -m "${MERGE_MSG}"

                                echo "üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–º—ñ–Ω –≤ ${MAIN_BRANCH_NAME}..."
                                timeout ${GIT_TIMEOUT}s git push origin "${MAIN_BRANCH_NAME}" || {
                                    echo "‚ùå Timeout –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ push"
                                    exit 1
                                }

                                echo "‚úÖ –ú–µ—Ä–¥–∂ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
                                echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:"
                                echo "–ì—ñ–ª–∫–∞: $(git branch --show-current)"
                                echo "–û—Å—Ç–∞–Ω–Ω—ñ–π commit: $(git log -1 --oneline)"
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def message = """
üéâ –£–°–ü–Ü–•! Jenkins Build #${BUILD_NUMBER}
‚úÖ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${env.TEST_STRATEGY}
üìä –ó–º—ñ–Ω–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${env.TOTAL_FILES_COUNT} (${env.GO_FILES_COUNT} Go, ${env.JS_FILES_COUNT} JS, ${env.CONFIG_FILES_COUNT} Config)
"""
                if (env.BRANCH_NAME == 'dev' && env.SKIP_TESTS != 'true') {
                    message += "üîÑ –ó–º—ñ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º–µ—Ä–∂–µ–Ω–æ –≤ main –≥—ñ–ª–∫—É\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è –¥–µ–ø–ª–æ—é!"
                } else if (env.SKIP_TESTS == 'true') {
                    message += "üìö –¢—ñ–ª—å–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è - —Ç–µ—Å—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ"
                }

                echo message
            }
        }

        failure {
            echo """
‚ùå –ü–û–ú–ò–õ–ö–ê! Jenkins Build #${BUILD_NUMBER}
üö´ Pipeline –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–º–∏–ª–∫–æ—é
üîí –ó–º—ñ–Ω–∏ –ù–ï –±—É–ª–∏ –∑–º–µ—Ä–∂–µ–Ω–æ –≤ main
üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥—ñ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
üìß –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –±—É–ª–∞: ${env.TEST_STRATEGY ?: '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞'}
            """
        }

        unstable {
            echo """
‚ö†Ô∏è –ù–ï–°–¢–ê–ë–Ü–õ–¨–ù–ò–ô –°–¢–ê–ù! Jenkins Build #${BUILD_NUMBER}
üîÑ –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏
üîí –ú–µ—Ä–¥–∂ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –¥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
            """
        }

        always {
            script {
                echo "üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∞ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è..."

                try {
                    archiveArtifacts artifacts: 'changed_*.txt', allowEmptyArchive: true, fingerprint: true
                } catch (Exception e) {
                    echo "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è: ${e.message}"
                }

                cleanWs(
                    cleanWhenAborted: true,
                    cleanWhenFailure: true,
                    cleanWhenNotBuilt: true,
                    cleanWhenSuccess: true,
                    cleanWhenUnstable: true,
                    deleteDirs: true
                )
            }
        }
    }
}
