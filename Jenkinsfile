pipeline {
    agent any

    triggers {
        githubPush()
        pollSCM('H/5 * * * *') // Backup polling every 5 minutes
    }

    tools {
        go 'go-1.21'
        nodejs 'nodejs-18'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 20, unit: 'MINUTES') // –ó–±—ñ–ª—å—à–µ–Ω–æ —á–∞—Å
        skipStagesAfterUnstable()
        ansiColor('xterm')
        retry(1)
    }

    environment {
        GOPROXY = 'https://proxy.golang.org,direct'
        CGO_ENABLED = '1'
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ç–µ–≥–∏ –¥–ª—è SQLite
        BUILD_TAGS = 'sqlite,sqlite_unlock_notify'
        GOPATH = "${env.WORKSPACE}/.go"
        GOCACHE = "${env.WORKSPACE}/.cache/go-build"
        NPM_CONFIG_CACHE = "${env.WORKSPACE}/.cache/npm"
        HOME = "${env.WORKSPACE}"
        // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
        GITEA_CONF_FOR_TEST = '1'
        GITEA_ROOT_PATH = "${env.WORKSPACE}"
        GITEA_WORK_DIR = "${env.WORKSPACE}"
        // –î–û–î–ê–ù–û: –ó–º—ñ–Ω–Ω—ñ –¥–ª—è SQLite
        TAGS = 'sqlite,sqlite_unlock_notify'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "üîÑ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–¥—É..."
                    checkout scm
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    env.BUILD_VERSION = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                }
            }
        }

        stage('Install System Dependencies') {
            steps {
                script {
                    echo "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
                    sh '''
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤
                        if command -v apt-get >/dev/null 2>&1; then
                            echo "üêß Debian/Ubuntu —Å–∏—Å—Ç–µ–º–∞"
                            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ SQLite3 —Ç–∞ —ñ–Ω—à—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
                            sudo apt-get update -qq || echo "‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–∞–∫–µ—Ç–∏"
                            sudo apt-get install -y sqlite3 libsqlite3-dev gcc g++ make || echo "‚ö†Ô∏è  SQLite –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–æ–º–∏–ª–∫–∞–º–∏"
                        elif command -v yum >/dev/null 2>&1; then
                            echo "üé© RedHat/CentOS —Å–∏—Å—Ç–µ–º–∞"
                            sudo yum install -y sqlite sqlite-devel gcc gcc-c++ make || echo "‚ö†Ô∏è  SQLite –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–æ–º–∏–ª–∫–∞–º–∏"
                        elif command -v apk >/dev/null 2>&1; then
                            echo "üèîÔ∏è Alpine —Å–∏—Å—Ç–µ–º–∞"
                            sudo apk add --no-cache sqlite sqlite-dev gcc g++ make || echo "‚ö†Ô∏è  SQLite –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–æ–º–∏–ª–∫–∞–º–∏"
                        else
                            echo "‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤, —Å–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤"
                        fi

                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è
                        echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SQLite3:"
                        sqlite3 --version && echo "‚úÖ SQLite3 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" || echo "‚ùå SQLite3 –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

                        echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞:"
                        gcc --version && echo "‚úÖ GCC –¥–æ—Å—Ç—É–ø–Ω–∏–π" || echo "‚ùå GCC –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π"
                    '''
                }
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    echo "üîß –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
                    sh '''
                        echo "üêπ Go version:"
                        go version || echo "‚ö†Ô∏è  Go –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

                        echo "üì¶ Node.js version:"
                        node --version || echo "‚ö†Ô∏è  Node.js –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

                        echo "üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –∫–µ—à—É..."
                        mkdir -p .cache/go-build .cache/npm .go/pkg/mod

                        echo "üóÑÔ∏è  –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
                        mkdir -p /tmp/gitea-test-${BUILD_NUMBER}
                        mkdir -p tests/tmp

                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å sqlite3
                        echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SQLite3:"
                        sqlite3 --version && echo "‚úÖ SQLite3 –¥–æ—Å—Ç—É–ø–Ω–∏–π" || echo "‚ùå SQLite3 –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π"

                        # –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ç–µ—Å—Ç–æ–≤—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
                        echo "üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó..."
                        mkdir -p custom/conf
                        cat > custom/conf/app.ini << 'EOF'
[database]
DB_TYPE = sqlite3
PATH = :memory:
LOG_SQL = false

[security]
SECRET_KEY = test_secret_key_for_ci_pipeline_$(date +%s)
INTERNAL_TOKEN = test_internal_token_for_ci

[log]
MODE = console
LEVEL = Warn
ROOT_PATH = ${WORKSPACE}/logs

[server]
OFFLINE_MODE = true
ROOT_URL = http://localhost:3000/

[mailer]
ENABLED = false

[service]
DISABLE_REGISTRATION = true
REQUIRE_SIGNIN_VIEW = false

[picture]
DISABLE_GRAVATAR = true

[session]
PROVIDER = memory

[cache]
ADAPTER = memory

[repository]
ROOT = ${WORKSPACE}/tmp/repos

[git]
PATH = git
EOF

                        # –î–û–î–ê–ù–û: –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–∫–æ–∂ app.ini –≤ –∫–æ—Ä–µ–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
                        cp custom/conf/app.ini ./app.ini

                        echo "‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ"
                    '''
                }
            }
        }

        stage('Dependencies') {
            steps {
                script {
                    echo "üì• –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Go
                    def goAvailable = sh(script: 'command -v go', returnStatus: true) == 0
                    if (goAvailable) {
                        echo "üêπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
                        sh '''
                            export PATH=$PATH:$(go env GOPATH)/bin
                            # –î–û–î–ê–ù–û: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è cgo-enabled –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
                            export CGO_ENABLED=1

                            echo "üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤..."
                            go mod download

                            echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—ñ–≤..."
                            go mod verify

                            echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—ñ–≤:"
                            go list -m all | wc -l | xargs echo "–í—Å—å–æ–≥–æ –º–æ–¥—É–ª—ñ–≤:"
                        '''
                    } else {
                        echo "‚ö†Ô∏è  Go –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ Go –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"
                    }

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ frontend
                    if (fileExists('package.json')) {
                        def nodeAvailable = sh(script: 'command -v npm', returnStatus: true) == 0
                        if (nodeAvailable) {
                            echo "üé® –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è frontend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
                            sh '''
                                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ë—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è npm –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
                                echo "üì¶ –û—á–∏—â–µ–Ω–Ω—è npm –∫–µ—à—É..."
                                npm cache clean --force 2>/dev/null || true

                                echo "üì• –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞–∫–µ—Ç—ñ–≤..."
                                npm ci --silent --no-progress --cache ${NPM_CONFIG_CACHE} || npm install --silent --no-progress --cache ${NPM_CONFIG_CACHE}

                                echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤..."
                                npm list --depth=0 2>/dev/null || echo "‚ö†Ô∏è  –î–µ—è–∫—ñ –ø–∞–∫–µ—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ"
                            '''
                        } else {
                            echo "‚ö†Ô∏è  Node.js/npm –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ frontend"
                        }
                    } else {
                        echo "üìù package.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ frontend –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"
                    }
                }
            }
        }

        stage('Code Quality') {
            when {
                expression {
                    sh(script: 'command -v go', returnStatus: true) == 0
                }
            }
            steps {
                script {
                    echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–æ–¥—É..."
                    sh '''
                        echo "üîç –ó–∞–ø—É—Å–∫ go vet –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ç–µ–≥–∞–º–∏..."
                        go vet -tags="${BUILD_TAGS}" ./... || echo "‚ö†Ô∏è  go vet –∑–Ω–∞–π—à–æ–≤ –ø—Ä–æ–±–ª–µ–º–∏"

                        echo "üìê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è..."
                        UNFORMATTED=$(go fmt -l . 2>/dev/null | head -10)
                        if [ -n "$UNFORMATTED" ]; then
                            echo "‚ö†Ô∏è  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏:"
                            echo "$UNFORMATTED"
                        else
                            echo "‚úÖ –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ"
                        fi

                        # –î–û–î–ê–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
                        echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É..."
                        [ -f "go.mod" ] && echo "‚úÖ go.mod –∑–Ω–∞–π–¥–µ–Ω–æ" || echo "‚ùå go.mod –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
                        [ -f "main.go" ] || [ -f "cmd/gitea/main.go" ] && echo "‚úÖ main.go –∑–Ω–∞–π–¥–µ–Ω–æ" || echo "‚ùå main.go –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"

                        # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π linting
                        if command -v golangci-lint >/dev/null 2>&1; then
                            echo "üî¨ –ó–∞–ø—É—Å–∫ golangci-lint..."
                            golangci-lint run --timeout=5m --out-format=colored-line-number || echo "‚ö†Ô∏è  Linter –∑–Ω–∞–π—à–æ–≤ –ø—Ä–æ–±–ª–µ–º–∏"
                        fi
                    '''
                }
            }
        }

        stage('Tests') {
            when {
                expression {
                    sh(script: 'command -v go', returnStatus: true) == 0
                }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤..."
                        sh '''
                            mkdir -p coverage logs tmp/repos

                            echo "üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
                            echo "Git version: $(git --version)"
                            echo "SQLite3: $(sqlite3 --version 2>/dev/null || echo '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')"
                            echo "CGO: $CGO_ENABLED"
                            echo "Build tags: $BUILD_TAGS"
                            echo "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: $(ls -la *.ini custom/conf/*.ini 2>/dev/null || echo '–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')"

                            # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
                            export GITEA_CONF="${WORKSPACE}/app.ini"
                            export TMPDIR="${WORKSPACE}/tmp"
                            export GITEA_WORK_DIR="${WORKSPACE}"
                            export GITEA_CUSTOM="${WORKSPACE}/custom"

                            echo "üîç –ü–æ—à—É–∫ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤..."
                            TEST_FILES=$(find . -name "*_test.go" -type f | wc -l)
                            echo "–ó–Ω–∞–π–¥–µ–Ω–æ $TEST_FILES —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"

                            if [ "$TEST_FILES" -eq 0 ]; then
                                echo "‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ"
                                exit 0
                            fi

                            echo "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤ –±–µ–∑ –ë–î..."

                            # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ç–µ–≥–∞–º–∏
                            FAILED_PACKAGES=""
                            PASSED_PACKAGES=""

                            # –¢–µ—Å—Ç—É—î–º–æ –ø–∞–∫–µ—Ç–∏, —è–∫—ñ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ë–î
                            for pkg in $(go list ./... | grep -v -E "(models|integration|e2e|test/|cmd)" | head -8); do
                                echo "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è $pkg..."
                                if go test -tags="${BUILD_TAGS}" -short -timeout=2m "$pkg" 2>/dev/null; then
                                    echo "  ‚úÖ $pkg - OK"
                                    PASSED_PACKAGES="$PASSED_PACKAGES $pkg"
                                else
                                    echo "  ‚ùå $pkg - FAIL"
                                    FAILED_PACKAGES="$FAILED_PACKAGES $pkg"
                                fi
                            done

                            # –í–ò–ü–†–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è cmd –ø–∞–∫–µ—Ç—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —Ç–µ–≥–∞–º–∏
                            echo "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è cmd –ø–∞–∫–µ—Ç—É –∑ SQLite —Ç–µ–≥–∞–º–∏..."
                            if go test -tags="${BUILD_TAGS}" -short -timeout=3m ./cmd/... 2>/dev/null; then
                                echo "‚úÖ CMD —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ –∑ SQLite —Ç–µ–≥–∞–º–∏"
                                PASSED_PACKAGES="$PASSED_PACKAGES cmd"
                            else
                                echo "‚ö†Ô∏è  CMD —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏"
                                FAILED_PACKAGES="$FAILED_PACKAGES cmd"
                            fi

                            # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –æ–∫—Ä–µ–º–æ
                            echo "üß™ –°–ø—Ä–æ–±–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π..."
                            if go test -tags="${BUILD_TAGS}" -short -timeout=2m ./models/... 2>/dev/null; then
                                echo "‚úÖ –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–π—à–ª–∏"
                                PASSED_PACKAGES="$PASSED_PACKAGES models"
                            else
                                echo "‚ö†Ô∏è  –¢–µ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ë–î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"
                                FAILED_PACKAGES="$FAILED_PACKAGES models"
                            fi

                            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∏—Ç—Ç—è
                            if [ -n "$PASSED_PACKAGES" ]; then
                                echo "üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–ª—è —É—Å–ø—ñ—à–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤..."
                                go test -tags="${BUILD_TAGS}" -short -timeout=4m -coverprofile=coverage/coverage.out -covermode=atomic $PASSED_PACKAGES 2>/dev/null || echo "‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤–Ω–µ –ø–æ–∫—Ä–∏—Ç—Ç—è"

                                if [ -f coverage/coverage.out ] && [ -s coverage/coverage.out ]; then
                                    COVERAGE=$(go tool cover -func=coverage/coverage.out 2>/dev/null | grep total | awk '{print $3}' || echo "N/A")
                                    echo "üìä –ü–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏: $COVERAGE"
                                    go tool cover -html=coverage/coverage.out -o coverage/coverage.html 2>/dev/null || echo "‚ö†Ô∏è  HTML –∑–≤—ñ—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ"
                                fi
                            fi

                            # –ü—ñ–¥—Å—É–º–æ–∫
                            echo "üìã –ü—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"
                            echo "‚úÖ –£—Å–ø—ñ—à–Ω—ñ –ø–∞–∫–µ—Ç–∏: $PASSED_PACKAGES"
                            if [ -n "$FAILED_PACKAGES" ]; then
                                echo "‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ñ –ø–∞–∫–µ—Ç–∏: $FAILED_PACKAGES"
                                echo "‚ÑπÔ∏è  –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è, –¥–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–≤–Ω–æ—ó –ë–î"
                            fi

                            # –ù–µ —Ñ–µ–π–ª–∏–º–æ –∑–±—ñ—Ä–∫—É —è–∫—â–æ —Ö–æ—á–∞ –± –¥–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏
                            if [ -z "$PASSED_PACKAGES" ]; then
                                echo "‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ: –∂–æ–¥–Ω—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏"
                                exit 1
                            fi
                        '''
                    }
                }
            }
            post {
                always {
                    script {
                        // –î–û–î–ê–ù–û: –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –∑–≤—ñ—Ç—ñ–≤ –ø—Ä–æ —Ç–µ—Å—Ç–∏
                        if (fileExists('coverage/coverage.html')) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'coverage',
                                reportFiles: 'coverage.html',
                                reportName: 'Coverage Report',
                                reportTitles: 'Test Coverage'
                            ])
                        }

                        def testResult = sh(script: '''
                            if [ -f coverage/coverage.out ] && [ -s coverage/coverage.out ]; then
                                echo "tests_success"
                            else
                                echo "tests_no_coverage"
                            fi
                        ''', returnStdout: true).trim()

                        if (testResult == "tests_no_coverage") {
                            unstable("–¢–µ—Å—Ç–∏ –Ω–µ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–ª–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è")
                        }
                    }
                }
            }
        }

        stage('Build') {
            steps {
                timeout(time: 8, unit: 'MINUTES') {
                    script {
                        echo "üî® –ó–±—ñ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç—É..."

                        def goAvailable = sh(script: 'command -v go', returnStatus: true) == 0
                        def nodeAvailable = sh(script: 'command -v npm', returnStatus: true) == 0

                        if (goAvailable) {
                            echo "üêπ –ó–±—ñ—Ä–∫–∞ Gitea backend..."
                            sh '''
                                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ñ LDFLAGS —Ç–∞ —Ç–µ–≥–∏
                                export LDFLAGS="-X 'code.gitea.io/gitea/modules/setting.AppVer=${BUILD_VERSION}' -X 'code.gitea.io/gitea/modules/setting.AppBuiltWith=Jenkins CI/CD' -s -w"

                                echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É..."
                                if [ -f "cmd/gitea/main.go" ]; then
                                    echo "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ Gitea —Å—Ç—Ä—É–∫—Ç—É—Ä—É: cmd/gitea/main.go"
                                    BUILD_TARGET="./cmd/gitea"
                                elif [ -f "main.go" ] && grep -q "gitea" main.go; then
                                    echo "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ Gitea main.go –≤ –∫–æ—Ä–µ–Ω—ñ"
                                    BUILD_TARGET="."
                                else
                                    echo "‚ùå –¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ Gitea –ø—Ä–æ–µ–∫—Ç!"
                                    echo "üîç –î–æ—Å—Ç—É–ø–Ω—ñ Go —Ñ–∞–π–ª–∏:"
                                    find . -name "*.go" -type f | head -10
                                    exit 1
                                fi

                                echo "üî® –ó–±—ñ—Ä–∫–∞ –∑ —Ç–µ–≥–∞–º–∏: ${BUILD_TAGS}"
                                go build -v -ldflags "$LDFLAGS" -tags "${BUILD_TAGS}" -o gitea $BUILD_TARGET

                                if [ -f "gitea" ]; then
                                    echo "‚úÖ Gitea –∑—ñ–±—Ä–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ"
                                    ls -lh gitea
                                    echo "üîç –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–±—ñ—Ä–∫—É:"
                                    file gitea
                                    ./gitea --version || echo "‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–µ—Ä—Å—ñ—é (–º–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ë–î)"
                                else
                                    echo "‚ùå –ó–±—ñ—Ä–∫–∞ Gitea –Ω–µ –≤–¥–∞–ª–∞—Å—è"
                                    exit 1
                                fi
                            '''
                        } else {
                            echo "‚ùå Go –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π - –Ω–µ–º–æ–∂–ª–∏–≤–æ –∑—ñ–±—Ä–∞—Ç–∏ Gitea"
                            error("Go environment not available")
                        }

                        if (fileExists('package.json') && nodeAvailable) {
                            echo "üé® –ó–±—ñ—Ä–∫–∞ Gitea frontend..."
                            sh '''
                                # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ë—ñ–ª—å—à –≥–Ω—É—á–∫–∞ –∑–±—ñ—Ä–∫–∞ frontend
                                echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm scripts..."
                                npm run --silent 2>/dev/null | grep -E "(build|webpack|vite)" || echo "–î–æ—Å—Ç—É–ø–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

                                # –ü—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑–±—ñ—Ä–∫–∏
                                if npm run build --silent; then
                                    echo "‚úÖ Frontend –∑—ñ–±—Ä–∞–Ω–æ (build)"
                                elif npm run build:prod --silent; then
                                    echo "‚úÖ Frontend –∑—ñ–±—Ä–∞–Ω–æ (build:prod)"
                                elif npm run webpack --silent; then
                                    echo "‚úÖ Frontend –∑—ñ–±—Ä–∞–Ω–æ (webpack)"
                                elif npm run dist --silent; then
                                    echo "‚úÖ Frontend –∑—ñ–±—Ä–∞–Ω–æ (dist)"
                                else
                                    echo "‚ö†Ô∏è  Frontend –∑–±—ñ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –Ω–µ—ó"
                                    echo "üí° Gitea –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ embedded assets"
                                fi

                                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                if [ -d "public" ] || [ -d "web_src/dist" ] || [ -d "dist" ]; then
                                    echo "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ frontend —Ñ–∞–π–ª–∏"
                                    ls -la public/ web_src/dist/ dist/ 2>/dev/null | head -10
                                fi
                            '''
                        }
                    }
                }
            }
        }

        stage('Package') {
            when {
                expression { fileExists('gitea') }
            }
            steps {
                script {
                    echo "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ñ–≤..."
                    sh '''
                        mkdir -p dist

                        # –ö–æ–ø—ñ—é—î–º–æ –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª
                        cp gitea dist/
                        chmod +x dist/gitea

                        # –í–ò–ü–†–ê–í–õ–ï–ù–û: –ö–æ–ø—ñ—é—î–º–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó Gitea
                        for dir in templates options public custom web_src/dist; do
                            if [ -d "$dir" ]; then
                                echo "üìÅ –ö–æ–ø—ñ—é—î–º–æ $dir/"
                                cp -r "$dir" dist/
                            fi
                        done

                        # –ö–æ–ø—ñ—é—î–º–æ –≤–∞–∂–ª–∏–≤—ñ —Ñ–∞–π–ª–∏
                        for file in README.md LICENSE CHANGELOG.md CONTRIBUTING.md docs; do
                            if [ -f "$file" ] || [ -d "$file" ]; then
                                echo "üìÑ –ö–æ–ø—ñ—é—î–º–æ $file"
                                cp -r "$file" dist/
                            fi
                        done

                        # –î–û–î–ê–ù–û: –ö–æ–ø—ñ—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥ —è–∫ –ø—Ä–∏–∫–ª–∞–¥
                        if [ -f "app.ini" ]; then
                            cp app.ini dist/app.ini.example
                        fi

                        # –°—Ç–≤–æ—Ä—é—î–º–æ —É—Å—Ç–∞–Ω–æ–≤—á–∏–π —Å–∫—Ä–∏–ø—Ç
                        cat > dist/install.sh << 'EOF'
#!/bin/bash
echo "üöÄ Gitea Installation Script"
echo "Version: ${BUILD_VERSION}"

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ gitea (—è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î)
if ! id "gitea" &>/dev/null; then
    echo "üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ gitea..."
    sudo useradd -r -s /bin/bash -d /var/lib/gitea gitea
fi

# –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
echo "üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π..."
sudo mkdir -p /var/lib/gitea/custom /var/lib/gitea/data /var/lib/gitea/log
sudo chown -R gitea:gitea /var/lib/gitea/

# –ö–æ–ø—ñ—é—î–º–æ binary
echo "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Gitea binary..."
sudo cp gitea /usr/local/bin/
sudo chmod +x /usr/local/bin/gitea

echo "‚úÖ Gitea –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
echo "üîß –ù–∞–ª–∞—à—Ç—É–π—Ç–µ /var/lib/gitea/custom/conf/app.ini"
echo "üöÄ –ó–∞–ø—É—Å—Ç—ñ—Ç—å: sudo -u gitea /usr/local/bin/gitea web"
EOF
                        chmod +x dist/install.sh

                        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä—Ö—ñ–≤
                        cd dist
                        tar -czf "gitea-${BUILD_VERSION}-linux-amd64.tar.gz" *
                        cd ..

                        echo "üì¶ –ü–∞–∫–µ—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ:"
                        ls -lah dist/*.tar.gz

                        # –î–û–î–ê–ù–û: –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ñ–∞–π–ª
                        cat > dist/build-info.json << EOF
{
  "version": "${BUILD_VERSION}",
  "build_time": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
  "git_commit": "${GIT_COMMIT_SHORT}",
  "jenkins_build": "${BUILD_NUMBER}",
  "go_version": "$(go version)",
  "node_version": "$(node --version 2>/dev/null || echo 'N/A')",
  "build_tags": "${BUILD_TAGS}",
  "test_status": "$([ -f coverage/coverage.out ] && echo 'Passed' || echo 'Skipped')",
  "coverage": "$([ -f coverage/coverage.out ] && go tool cover -func=coverage/coverage.out 2>/dev/null | grep total | awk '{print $3}' || echo 'N/A')"
}
EOF

                        echo "‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è"
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßπ –û—á–∏—â–µ–Ω–Ω—è..."
                sh '''
                    # –û—á–∏—â—É—î–º–æ –∑–±—ñ—Ä–∫—É, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –∫–µ—à
                    rm -f gitea
                    find . -name "*.tmp" -delete 2>/dev/null || true
                    rm -rf "/tmp/gitea-test-${BUILD_NUMBER}" 2>/dev/null || true

                    # –î–û–î–ê–ù–û: –ê—Ä—Ö—ñ–≤—É—î–º–æ –ª–æ–≥–∏ —è–∫—â–æ —î
                    if [ -d "logs" ] && [ "$(ls -A logs 2>/dev/null)" ]; then
                        tar -czf "logs-${BUILD_NUMBER}.tar.gz" logs/
                    fi
                '''
            }
        }
        success {
            script {
                echo "‚úÖ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
                echo "üìä –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${currentBuild.durationString}"
                echo "üì¶ –í–µ—Ä—Å—ñ—è –∑–±—ñ—Ä–∫–∏: ${env.BUILD_VERSION}"

                // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ê—Ä—Ö—ñ–≤—É—î–º–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —à–∞–±–ª–æ–Ω–æ–º
                archiveArtifacts artifacts: 'dist/*.tar.gz, dist/build-info.json, logs-*.tar.gz', fingerprint: true, allowEmptyArchive: true

                if (fileExists('coverage/coverage.out')) {
                    echo "üìà –ó–≤—ñ—Ç –∑ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ"
                }

                // –î–û–î–ê–ù–û: –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
                try {
                    currentBuild.description = "‚úÖ v${env.BUILD_VERSION} - –ó–±—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–∞"
                } catch (Exception e) {
                    echo "‚ö†Ô∏è  –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ–ø–∏—Å –∑–±—ñ—Ä–∫–∏"
                }
            }
        }
        failure {
            script {
                echo "‚ùå Pipeline –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è –Ω–∞ –µ—Ç–∞–ø—ñ: ${env.STAGE_NAME}"
                currentBuild.description = "‚ùå –ü—Ä–æ–≤–∞–ª –Ω–∞: ${env.STAGE_NAME}"

                // –î–û–î–ê–ù–û: –ó–±—ñ—Ä –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–∏ –ø–∞–¥—ñ–Ω–Ω—ñ
                sh '''
                    echo "üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–∏ –ø–∞–¥—ñ–Ω–Ω—ñ:"
                    echo "–ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: $(pwd)"
                    echo "–î–æ—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä: $(df -h . | tail -1)"
                    echo "–í–µ—Ä—Å—ñ—ó —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:"
                    go version 2>/dev/null || echo "Go –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
                    node --version 2>/dev/null || echo "Node –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
                    sqlite3 --version 2>/dev/null || echo "SQLite –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
                    echo "–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:"
                    env | grep -E "(GO|NODE|CGO|BUILD)" | sort
                ''' || true
            }
        }
        unstable {
            script {
                echo "‚ö†Ô∏è  Pipeline –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏"
                currentBuild.description = "‚ö†Ô∏è  –ù–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∞ –∑–±—ñ—Ä–∫–∞ v${env.BUILD_VERSION}"
            }
        }
    }
}
