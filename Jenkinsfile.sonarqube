pipeline {
  agent {
    label 'docker-agent'
  }

  environment {
    SONAR_HOST_URL = 'http://sonarqube:9000'
    GIT_BRANCH_NAME = ''
  }

  options {
    skipDefaultCheckout true
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        script {
          def rawRef = sh(
            script: "git log -n 1 --pretty=%D HEAD",
            returnStdout: true
          ).trim()

          def matcher = rawRef =~ /origin\/([^, ]+)/
          if (matcher) {
            env.GIT_BRANCH_NAME = matcher[0][1]
          } else {
            error "Cannot detect branch name from: ${rawRef}"
          }

          echo "Detected branch: ${env.GIT_BRANCH_NAME}"

          if (env.GIT_BRANCH_NAME != 'dev') {
            error "Pipeline is not running on 'dev' branch. Aborting."
          }
        }
      }
    }

    stage('Detect .go changes on dev') {
      steps {
        script {
          def changed = sh(script: '''
            git fetch origin main
            git diff --name-only origin/main...HEAD | grep '\\.go$' || true
          ''', returnStdout: true).trim()

          if (changed) {
            writeFile file: 'changed-go-files.txt', text: changed
            echo "Changed .go files:\n${changed}"
            env.HAS_GO_CHANGES = "true"
          } else {
            echo "No .go files changed. Aborting analysis."
            currentBuild.result = 'FAILURE'
            error("No .go file changes detected.")
          }
        }
      }
    }

    stage('SonarQube Analysis') {
      environment {
        SONAR_SCANNER_OPTS = "-Xmx512m"
      }
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          sh '''
            sonar-scanner \
              -Dsonar.projectKey=gitea \
              -Dsonar.sources=. \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_TOKEN \
              -Dsonar.inclusions=$(cat changed-go-files.txt | tr '\\n' ',' | sed 's/,\$//')
          '''
        }
      }
    }

    stage('Archive Sonar Report') {
      steps {
        sh '''
          mkdir -p artifacts
          if [ -f .scannerwork/report-task.txt ]; then
            cp .scannerwork/report-task.txt artifacts/
          else
            echo 'No report generated.' > artifacts/no-report.txt
          fi
        '''
        archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
      }
    }
  }
}
