pipeline {
  agent {
    label 'docker-agent'
  }

  environment {
    SONAR_HOST_URL = 'http://sonarqube:9000'
    SONAR_SCANNER_OPTS = "-Xmx512m"
    JAVA_HOME = '/opt/java/openjdk'
  }

  options {
    skipDefaultCheckout true
    timeout(time: 30, unit: 'MINUTES')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        script {
          echo "Detected branch: ${env.BRANCH_NAME}"
          if (env.BRANCH_NAME != 'dev') {
            currentBuild.result = 'NOT_BUILT'
            error("Skipping analysis: not running on 'dev' branch.")
          }
        }
      }
    }

    stage('Detect .go changes compared to main') {
      steps {
        script {
          sh "git fetch origin main"

          def changed = sh(script: '''
            git diff --name-only origin/main...HEAD | grep '\\.go$' || true
          ''', returnStdout: true).trim()

          if (changed) {
            writeFile file: 'changed-go-files.txt', text: changed
            echo "Detected changed .go files:\n${changed}"
            env.HAS_GO_CHANGES = "true"
          } else {
            echo "No .go files changed. Skipping SonarQube analysis."
            currentBuild.result = 'SUCCESS'
            return
          }
        }
      }
    }

    stage('SonarQube Analysis') {
      when {
        environment name: 'HAS_GO_CHANGES', value: 'true'
      }
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          sh '''
            echo "=== Running SonarQube Analysis ==="
            echo "Java version: $($JAVA_HOME/bin/java -version 2>&1 | head -1)"

            $JAVA_HOME/bin/java -jar /opt/sonar-scanner/lib/sonar-scanner-cli-*.jar \
              -Dsonar.projectKey=gitea \
              -Dsonar.sources=. \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_TOKEN \
              -Dsonar.inclusions=$(cat changed-go-files.txt | tr '\\n' ',' | sed 's/,$//')
          '''
        }
      }
    }

    stage('Quality Gate') {
      when {
        environment name: 'HAS_GO_CHANGES', value: 'true'
      }
      steps {
        script {
          echo "=== Waiting for Quality Gate result ==="

          // Читаємо task URL з report-task.txt
          def reportTaskFile = '.scannerwork/report-task.txt'
          if (!fileExists(reportTaskFile)) {
            error("SonarQube report-task.txt not found. Analysis might have failed.")
          }

          def taskUrl = sh(script: "grep 'ceTaskUrl=' ${reportTaskFile} | cut -d'=' -f2-", returnStdout: true).trim()
          if (!taskUrl) {
            error("Could not extract task URL from SonarQube report.")
          }

          echo "Task URL: ${taskUrl}"

          // Чекаємо завершення аналізу
          timeout(time: 5, unit: 'MINUTES') {
            waitUntil {
              script {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                  def taskStatus = sh(script: """
                    curl -s -u \$SONAR_TOKEN: '${taskUrl}' | grep -o '"status":"[^"]*"' | cut -d'"' -f4 || echo 'UNKNOWN'
                  """, returnStdout: true).trim()

                  echo "Task status: ${taskStatus}"

                  if (taskStatus == 'SUCCESS') {
                    return true
                  } else if (taskStatus == 'FAILED' || taskStatus == 'CANCELLED') {
                    error("SonarQube analysis failed with status: ${taskStatus}")
                  }

                  sleep(10)
                  return false
                }
              }
            }
          }

          // Отримуємо результат Quality Gate
          withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
            def analysisId = sh(script: """
              curl -s -u \$SONAR_TOKEN: '${taskUrl}' | grep -o '"analysisId":"[^"]*"' | cut -d'"' -f4
            """, returnStdout: true).trim()

            if (!analysisId) {
              error("Could not extract analysis ID from SonarQube task.")
            }

            echo "Analysis ID: ${analysisId}"

            def qualityGateUrl = "${SONAR_HOST_URL}/api/qualitygates/project_status?analysisId=${analysisId}"
            def qualityGateResult = sh(script: """
              curl -s -u \$SONAR_TOKEN: '${qualityGateUrl}' | grep -o '"status":"[^"]*"' | cut -d'"' -f4
            """, returnStdout: true).trim()

            echo "Quality Gate status: ${qualityGateResult}"

            if (qualityGateResult == 'ERROR') {
              // Отримуємо детальну інформацію про помилки
              def details = sh(script: """
                curl -s -u \$SONAR_TOKEN: '${qualityGateUrl}' | grep -o '"conditions":\\[.*\\]' || echo 'No details available'
              """, returnStdout: true).trim()

              echo "Quality Gate failed. Details: ${details}"
              currentBuild.result = 'UNSTABLE'
              error("Quality Gate failed. Check SonarQube dashboard for details: ${SONAR_HOST_URL}/dashboard?id=gitea")
            } else if (qualityGateResult == 'OK') {
              echo "✅ Quality Gate passed!"
            } else {
              echo "⚠️ Quality Gate status: ${qualityGateResult}"
            }
          }
        }
      }
    }

    stage('Archive Sonar Report') {
      when {
        environment name: 'HAS_GO_CHANGES', value: 'true'
      }
      steps {
        sh '''
          mkdir -p artifacts
          if [ -f .scannerwork/report-task.txt ]; then
            cp .scannerwork/report-task.txt artifacts/
            echo "SonarQube Dashboard: $SONAR_HOST_URL/dashboard?id=gitea" > artifacts/sonar-dashboard-link.txt
          else
            echo 'No report generated.' > artifacts/no-report.txt
          fi
        '''
        archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
      }
    }
  }

  post {
    always {
      script {
        if (env.HAS_GO_CHANGES != 'true') {
          echo "Pipeline completed: No Go changes detected, skipped SonarQube analysis"
        }
      }
    }
    failure {
      script {
        if (env.HAS_GO_CHANGES == 'true') {
          echo "Pipeline failed during SonarQube analysis or Quality Gate check"
          echo "Check SonarQube dashboard: ${SONAR_HOST_URL}/dashboard?id=gitea"
        }
      }
    }
  }
}
