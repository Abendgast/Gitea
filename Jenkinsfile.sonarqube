pipeline {
  agent {
    label 'docker-agent'
  }

  environment {
    SONAR_HOST_URL = 'http://sonarqube:9000'
    SONAR_SCANNER_OPTS = "-Xmx512m"
    JAVA_HOME = '/opt/java/openjdk'
  }

  options {
    skipDefaultCheckout true
    timeout(time: 30, unit: 'MINUTES')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        script {
          echo "Detected branch: ${env.BRANCH_NAME}"
          if (env.BRANCH_NAME != 'dev') {
            currentBuild.result = 'NOT_BUILT'
            error("Skipping analysis: not running on 'dev' branch.")
          }
        }
      }
    }

    stage('Detect Changes') {
      steps {
        script {
          sh "git fetch origin main"

          def changedGo = sh(script: '''
            git diff --name-only origin/main...HEAD | grep '\\.go$' || true
          ''', returnStdout: true).trim()

          def changedFiles = sh(script: '''
            git diff --name-only origin/main...HEAD | grep -E '\\.(go|js|ts|py|java|json|yaml|yml)$' || true
          ''', returnStdout: true).trim()

          if (changedGo) {
            writeFile file: 'changed-go-files.txt', text: changedGo
            echo "Detected changed .go files:\\n${changedGo}"
            env.HAS_GO_CHANGES = "true"
          } else {
            echo "No .go files changed. Skipping SonarQube analysis."
          }

          if (changedFiles) {
            writeFile file: 'changed-files.txt', text: changedFiles
            echo "Detected changed files for security scan:\\n${changedFiles}"
            env.HAS_FILE_CHANGES = "true"
          } else {
            echo "No relevant files changed. Skipping security scan."
          }

          if (!changedGo && !changedFiles) {
            currentBuild.result = 'SUCCESS'
            return
          }
        }
      }
    }

    stage('Snyk Security Scan') {
      when {
        environment name: 'HAS_FILE_CHANGES', value: 'true'
      }
      steps {
        script {
          withCredentials([
            string(credentialsId: 'snyk-api-token', variable: 'SNYK_TOKEN'),
            string(credentialsId: 'discord-webhook', variable: 'DISCORD_WEBHOOK')
          ]) {
            try {
              // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Snyk
              sh '''
                echo "Checking Snyk installation..."
                which snyk || { echo "Snyk not found in PATH"; exit 1; }
                snyk --version || { echo "Snyk version check failed"; exit 1; }
              '''

              sh '''
                echo "Running Snyk Security Scan"
                export SNYK_TOKEN=$SNYK_TOKEN

                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
                snyk auth $SNYK_TOKEN

                mkdir -p snyk-results

                # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑ –∫—Ä–∞—â–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
                snyk test --json > snyk-results/results.json 2>/dev/null || {
                  echo "Snyk test completed with findings or warnings"
                  # –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤—Å—è, —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π
                  if [ ! -f snyk-results/results.json ]; then
                    echo '{"vulnerabilities":[]}' > snyk-results/results.json
                  fi
                }

                python3 << 'EOF'
import json
import requests
import os
from datetime import datetime

def send_discord_notification(message):
    webhook_url = os.getenv('DISCORD_WEBHOOK')
    if not webhook_url:
        print("No Discord webhook configured")
        return

    data = {
        'content': message,
        'username': 'Snyk Security Scanner'
    }

    try:
        response = requests.post(webhook_url, json=data)
        if response.status_code == 204:
            print('Discord notification sent successfully')
        else:
            print(f'Discord notification failed: {response.status_code}')
            print(f'Response: {response.text}')
    except Exception as e:
        print(f'Failed to send Discord notification: {e}')

high_count = 0
medium_count = 0
low_count = 0

try:
    with open('snyk-results/results.json', 'r') as f:
        data = json.load(f)
        if 'vulnerabilities' in data:
            for vuln in data['vulnerabilities']:
                severity = vuln.get('severity', 'low').lower()
                if severity == 'high':
                    high_count += 1
                elif severity == 'medium':
                    medium_count += 1
                else:
                    low_count += 1
        else:
            print("No vulnerabilities section found in results")
except FileNotFoundError:
    print("Results file not found")
except json.JSONDecodeError as e:
    print(f"Error parsing JSON: {e}")
    # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª —è–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    try:
        with open('snyk-results/results.json', 'r') as f:
            content = f.read()
            print(f"File content: {content[:500]}...")
    except Exception as fe:
        print(f"Could not read file: {fe}")
except Exception as e:
    print(f"Error processing Snyk results: {e}")

total_count = high_count + medium_count + low_count
branch = os.getenv('BRANCH_NAME', 'unknown')
build_number = os.getenv('BUILD_NUMBER', '0')

status = "CLEAN" if total_count == 0 else "ISSUES FOUND"
status_emoji = "‚úÖ" if total_count == 0 else "‚ö†Ô∏è"

message = f"""{status_emoji} **Security Scan Report**
Branch: {branch} | Build: #{build_number}
Status: {status}
High: {high_count} | Medium: {medium_count} | Low: {low_count}
Total: {total_count}"""

print(f"Sending notification: {message}")
send_discord_notification(message)

with open('snyk-results/summary.txt', 'w') as f:
    f.write(f"HIGH:{high_count}\\n")
    f.write(f"MEDIUM:{medium_count}\\n")
    f.write(f"LOW:{low_count}\\n")
    f.write(f"TOTAL:{total_count}\\n")

print(f"Security scan completed. Total vulnerabilities: {total_count}")
EOF
              '''

              def summary = readFile('snyk-results/summary.txt')
              def totalVulns = summary.readLines().find { it.startsWith('TOTAL:') }?.split(':')[1]?.trim()?.toInteger() ?: 0

              if (totalVulns > 0) {
                echo "Security scan found ${totalVulns} vulnerabilities - marking as UNSTABLE"
                currentBuild.result = 'UNSTABLE'
              } else {
                echo "Security scan completed - no vulnerabilities found"
              }

            } catch (Exception e) {
              echo "Snyk scan failed: ${e.getMessage()}"

              // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ Discord
              withCredentials([string(credentialsId: 'discord-webhook', variable: 'DISCORD_WEBHOOK')]) {
                sh '''
                  python3 << 'EOF'
import requests
import os

webhook_url = os.getenv('DISCORD_WEBHOOK')
if webhook_url:
    message = f"üö® **Snyk Scan Failed**\\nBranch: {os.getenv('BRANCH_NAME', 'unknown')}\\nBuild: #{os.getenv('BUILD_NUMBER', '0')}\\nError: Snyk tool not accessible"
    try:
        response = requests.post(webhook_url, json={'content': message, 'username': 'Snyk Security Scanner'})
        print(f"Discord notification sent: {response.status_code}")
    except Exception as e:
        print(f"Failed to send Discord notification: {e}")
EOF
                '''
              }

              currentBuild.result = 'UNSTABLE'
            }
          }
        }
      }
    }

    stage('SonarQube Analysis') {
      when {
        environment name: 'HAS_GO_CHANGES', value: 'true'
      }
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          sh '''
            echo "=== Running SonarQube Analysis ==="
            echo "Java version: $($JAVA_HOME/bin/java -version 2>&1 | head -1)"

            $JAVA_HOME/bin/java -jar /opt/sonar-scanner/lib/sonar-scanner-cli-*.jar \
              -Dsonar.projectKey=gitea \
              -Dsonar.sources=. \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_TOKEN \
              -Dsonar.inclusions=$(cat changed-go-files.txt | tr '\\n' ',' | sed 's/,$//')
          '''
        }
      }
    }

    stage('Quality Gate') {
      when {
        environment name: 'HAS_GO_CHANGES', value: 'true'
      }
      steps {
        script {
          echo "Waiting for Quality Gate result"

          def reportTaskFile = '.scannerwork/report-task.txt'
          if (!fileExists(reportTaskFile)) {
            error("SonarQube report-task.txt not found. Analysis might have failed.")
          }

          def taskUrl = sh(script: "grep 'ceTaskUrl=' ${reportTaskFile} | cut -d'=' -f2-", returnStdout: true).trim()
          if (!taskUrl) {
            error("Could not extract task URL from SonarQube report.")
          }

          echo "Task URL: ${taskUrl}"

          timeout(time: 5, unit: 'MINUTES') {
            waitUntil {
              script {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                  def taskStatus = sh(script: """
                    curl -s -u \$SONAR_TOKEN: '${taskUrl}' | grep -o '"status":"[^"]*"' | cut -d'"' -f4 || echo 'UNKNOWN'
                  """, returnStdout: true).trim()

                  echo "Task status: ${taskStatus}"

                  if (taskStatus == 'SUCCESS') {
                    return true
                  } else if (taskStatus == 'FAILED' || taskStatus == 'CANCELLED') {
                    error("SonarQube analysis failed with status: ${taskStatus}")
                  }

                  sleep(10)
                  return false
                }
              }
            }
          }

          withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
            def analysisId = sh(script: """
              curl -s -u \$SONAR_TOKEN: '${taskUrl}' | grep -o '"analysisId":"[^"]*"' | cut -d'"' -f4
            """, returnStdout: true).trim()

            if (!analysisId) {
              error("Could not extract analysis ID from SonarQube task.")
            }

            echo "Analysis ID: ${analysisId}"

            def qualityGateUrl = "${SONAR_HOST_URL}/api/qualitygates/project_status?analysisId=${analysisId}"
            def qualityGateResult = sh(script: """
              curl -s -u \$SONAR_TOKEN: '${qualityGateUrl}' | grep -o '"status":"[^"]*"' | cut -d'"' -f4 | head -1
            """, returnStdout: true).trim()

            echo "Quality Gate status: ${qualityGateResult}"

            if (qualityGateResult == 'ERROR') {
              def details = sh(script: """
                curl -s -u \$SONAR_TOKEN: '${qualityGateUrl}'
              """, returnStdout: true).trim()

              echo "Quality Gate failed"
              currentBuild.result = 'UNSTABLE'
              error("Quality Gate failed. Check SonarQube for details")
            } else if (qualityGateResult == 'OK') {
              echo "Quality Gate passed"
            } else {
              echo "Quality Gate status: ${qualityGateResult}"
            }
          }
        }
      }
    }

    stage('Archive Reports') {
      when {
        anyOf {
          environment name: 'HAS_GO_CHANGES', value: 'true'
          environment name: 'HAS_FILE_CHANGES', value: 'true'
        }
      }
      steps {
          sh '''
            mkdir -p artifacts
            if [ -f .scannerwork/report-task.txt ]; then
              cp .scannerwork/report-task.txt artifacts/
              echo "SonarQube Dashboard: ${SONAR_HOST_URL}/projects" > artifacts/sonar-dashboard-link.txt
            else
              echo 'No SonarQube report generated.' > artifacts/no-sonar-report.txt
            fi

            if [ -d snyk-results ]; then
              cp -r snyk-results artifacts/
            else
              echo 'No Snyk results generated.' > artifacts/no-snyk-results.txt
            fi
          '''
        archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
      }
    }
  }

  post {
    always {
      script {
        if (env.HAS_GO_CHANGES != 'true' && env.HAS_FILE_CHANGES != 'true') {
          echo "Pipeline completed: No relevant changes detected"
        }
      }
    }
    failure {
      script {
        if (env.HAS_GO_CHANGES == 'true') {
          echo "Pipeline failed during SonarQube analysis"
          echo "Check SonarQube dashboard: ${SONAR_HOST_URL}/dashboard?id=gitea"
        }
        if (env.HAS_FILE_CHANGES == 'true') {
          echo "Pipeline failed during security scan"
        }
      }
    }
    success {
      script {
        echo "Pipeline completed successfully"
        if (currentBuild.result == 'UNSTABLE') {
          echo "Build marked as UNSTABLE due to security findings or quality gate issues"
        }
      }
    }
  }
}
