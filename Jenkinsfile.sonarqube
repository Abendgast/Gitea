pipeline {
  agent any

  environment {
    SONAR_TOKEN = credentials('sonar-token')
  }

  options {
    skipStagesAfterUnstable()
  }

  stages {
    stage('Get changed files') {
      when {
        branch 'dev'
      }
      steps {
        script {
          def changed = sh(
            script: 'git fetch origin main && git diff --name-only origin/main...HEAD | grep "\\.go$" || true',
            returnStdout: true
          ).trim().split('\n').findAll { it?.trim() }

          if (changed.isEmpty()) {
            echo "No changed .go files. Skipping analysis."
            currentBuild.result = 'SUCCESS'
            return
          }

          def inclusions = changed.join(',')

          writeFile file: 'sonar-project.properties', text: """
            sonar.projectKey=gitea-devops
            sonar.projectName=Gitea DevOps
            sonar.sources=.
            sonar.inclusions=${inclusions}
            sonar.language=go
            sonar.host.url=http://sonarqube:9000
            sonar.login=${SONAR_TOKEN}
          """.stripIndent()
        }
      }
    }

    stage('Run SonarQube analysis') {
      when {
        branch 'dev'
      }
      steps {
        sh 'sonar-scanner -X'
      }
    }

    stage('Archive Sonar report') {
      steps {
        script {
          sh '''
            mkdir -p artifacts
            if [ -f ".scannerwork/report-task.txt" ]; then
              cp .scannerwork/report-task.txt artifacts/sonar-report.txt
            else
              echo "No report generated." > artifacts/sonar-report.txt
            fi
          '''
          archiveArtifacts artifacts: 'artifacts/sonar-report.txt', fingerprint: true
        }
      }
    }
  }
}
