pipeline {
    agent {
        label 'docker-agent'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    sh 'rm -rf .git || true'
                    sh 'rm -rf * || true'
                }

                retry(3) {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/dev']],
                        extensions: [
                            [$class: 'CloneOption', shallow: false, noTags: false, depth: 0],
                            [$class: 'CleanBeforeCheckout'],
                            [$class: 'CleanCheckout']
                        ],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Abendgast/Gitea',
                            credentialsId: 'github-access-token'
                        ]],
                        gitTool: 'Default'
                    ])
                }
            }
        }

        stage('Wait for SonarQube') {
            steps {
                sh '''
                    echo "Waiting for SonarQube to be ready..."
                    timeout 120 sh -c 'until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do
                        echo "SonarQube not ready yet, waiting..."
                        sleep 10
                    done'
                    echo "SonarQube is ready!"
                '''
            }
        }

        stage('Create SonarQube Project') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        echo "Creating SonarQube project if it doesn't exist..."

                        PROJECT_EXISTS=$(curl -s -u ${SONAR_TOKEN}: \
                            "http://localhost:9000/api/projects/search?projects=devops-infra" \
                            | grep -c "devops-infra" || echo "0")

                        if [ "$PROJECT_EXISTS" = "0" ]; then
                            echo "Project doesn't exist, creating..."
                            curl -X POST -u ${SONAR_TOKEN}: \
                                "http://localhost:9000/api/projects/create" \
                                -d "project=devops-infra" \
                                -d "name=DevOps Infrastructure"
                            echo "Project created successfully!"
                        else
                            echo "Project already exists, skipping creation."
                        fi
                    '''
                }
            }
        }

        stage('Prepare Analysis') {
            steps {
                sh '''
                    cat > sonar-project.properties << EOF
sonar.projectKey=devops-infra
sonar.projectName=DevOps Infrastructure
sonar.projectVersion=1.0
sonar.sources=.
sonar.sourceEncoding=UTF-8
sonar.exclusions=**/repos/**,**/data/**,**/logs/**,**/.idea/**,**/secrets/**,**/target/**,**/node_modules/**,**/*.log,**/*.tmp,**/splunk/var/**,**/splunk/etc/**
sonar.coverage.exclusions=**/test/**,**/tests/**,**/*test*/**
sonar.scm.provider=git
sonar.scm.forceReloadAll=true
EOF
                    echo "Created sonar-project.properties:"
                    cat sonar-project.properties
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        echo "Starting SonarQube analysis..."

                        sonar-scanner \
                            -Dsonar.projectKey=devops-infra \
                            -Dsonar.projectName="DevOps Infrastructure" \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://localhost:9000 \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.exclusions='**/repos/**,**/data/**,**/logs/**,**/.idea/**,**/secrets/**,**/splunk/var/**,**/splunk/etc/**' \
                            -Dsonar.scm.provider=git \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sourceEncoding=UTF-8
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        try {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                echo "Quality Gate Status: ${qg.status}"
                                if (qg.status == 'ERROR') {
                                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                } else {
                                    unstable "Quality Gate warning: ${qg.status}"
                                }
                            } else {
                                echo "Quality Gate passed successfully!"
                            }
                        } catch (Exception e) {
                            echo "Quality Gate check failed: ${e.getMessage()}"
                            echo "This might be normal for the first run. Check SonarQube UI."
                            unstable "Quality Gate check failed - please verify in SonarQube UI"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'SonarQube analysis completed successfully!'
            echo 'Check results at: http://localhost:9000/dashboard?id=devops-infra'
        }
        failure {
            echo 'SonarQube analysis failed!'
        }
    }
}
