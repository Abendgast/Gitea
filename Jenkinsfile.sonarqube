pipeline {
    agent {
        label 'docker-agent'
    }

    environment {
        GIT_CURL_VERBOSE = '1'
        GIT_TRACE = '1'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    sh 'rm -rf .git || true'
                    sh 'rm -rf * || true'

                    sh '''
                        git config --global core.compression 0
                        git config --global pack.compression 0
                        git config --global http.postBuffer 1048576000
                        git config --global http.maxRequestBuffer 100M
                        git config --global protocol.version 2
                        git config --global http.version HTTP/1.1
                        git config --global safe.directory '*'
                    '''
                }

                retry(3) {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/dev']],
                        extensions: [
                            [$class: 'CloneOption', shallow: false, noTags: true],
                            [$class: 'CleanBeforeCheckout'],
                            [$class: 'CleanCheckout']
                        ],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Abendgast/Gitea',
                            credentialsId: 'github-access-token'
                        ]],
                        gitTool: 'Default'
                    ])
                }
            }
        }

        stage('Git Info') {
            steps {
                sh '''
                    echo "Git version:"
                    git --version
                    echo "Repository status:"
                    git status
                    echo "Repository info:"
                    git log --oneline -5
                '''
            }
        }

        stage('Prepare Analysis') {
            steps {
                script {
                    // Створюємо sonar-project.properties якщо його немає
                    sh '''
                        if [ ! -f sonar-project.properties ]; then
                            cat > sonar-project.properties << EOF
sonar.projectKey=devops-infra
sonar.projectName=DevOps Infrastructure
sonar.projectVersion=1.0
sonar.sources=.
sonar.sourceEncoding=UTF-8
sonar.exclusions=**/repos/**,**/data/**,**/logs/**,**/.idea/**,**/secrets/**,**/target/**,**/node_modules/**,**/*.log,**/*.tmp
sonar.coverage.exclusions=**/test/**,**/tests/**,**/*test*/**
sonar.scm.provider=git
sonar.scm.forceReloadAll=true
EOF
                            echo "Created sonar-project.properties"
                        fi

                        echo "Sonar project configuration:"
                        cat sonar-project.properties
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                        echo "Starting SonarQube analysis..."

                        timeout 60 sh -c 'until curl -s http://localhost:9000/api/system/status | grep -q "UP"; do sleep 5; done'

                        sonar-scanner \
                            -Dsonar.projectKey=devops-infra \
                            -Dsonar.projectName="DevOps Infrastructure" \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://localhost:9000 \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.exclusions='**/repos/**,**/data/**,**/logs/**,**/.idea/**,**/secrets/**,**/splunk/var/**,**/splunk/etc/**' \
                            -Dsonar.scm.provider=git \
                            -Dsonar.scm.forceReloadAll=true \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sourceEncoding=UTF-8 \
                            -X
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()

                        if (qg.status != 'OK') {
                            echo "Quality Gate Status: ${qg.status}"
                            if (qg.status == 'ERROR') {
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                            } else {
                                unstable "Quality Gate warning: ${qg.status}"
                            }
                        } else {
                            echo "Quality Gate passed successfully!"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'SonarQube analysis completed successfully!'
        }
        failure {
            echo 'SonarQube analysis failed!'
        }
    }
}
