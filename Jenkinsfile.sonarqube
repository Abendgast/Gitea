pipeline {
  agent any

  environment {
    SONAR_TOKEN = credentials('sonar-token')
  }

  options {
    skipStagesAfterUnstable()
  }

  stages {
    stage('Get changed .go files') {
      steps {
        script {
          def branch = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
          echo "Running on branch: ${branch}"
          if (branch == "dev") {
            env.ON_DEV_BRANCH = "true"
            def changedFiles = sh(script: "git fetch origin main && git diff --name-only origin/main...HEAD | grep '\\.go$' || true", returnStdout: true).trim()
            if (changedFiles) {
              writeFile file: 'changed-go-files.txt', text: changedFiles
              env.HAS_GO_CHANGES = "true"
              echo "Changed .go files:\n${changedFiles}"
            } else {
              echo "No .go files changed."
            }
          } else {
            echo "Not on dev branch — skipping analysis"
          }
        }
      }
    }

    stage('Run SonarQube analysis') {
      steps {
        script {
          if (env.BRANCH_NAME != 'dev') {
            echo "Not on dev branch — skipping analysis"
            return
          }
          sh 'sonar-scanner -X'
        }
      }
    }

    stage('Archive Sonar report') {
      steps {
        script {
          sh '''
            mkdir -p artifacts
            if [ -f ".scannerwork/report-task.txt" ]; then
              cp .scannerwork/report-task.txt artifacts/sonar-report.txt
            else
              echo "No report generated." > artifacts/sonar-report.txt
            fi
          '''
          archiveArtifacts artifacts: 'artifacts/sonar-report.txt', fingerprint: true
        }
      }
    }
  }
}
