pipeline {
  agent {
    label 'docker-agent'
  }

  environment {
    SONAR_HOST_URL = 'http://sonarqube:9000'
    SONAR_SCANNER_OPTS = "-Xmx512m"
    JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
    PATH = "${JAVA_HOME}/bin:${env.PATH}"
  }

  options {
    skipDefaultCheckout true
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        script {
          echo "Detected branch: ${env.BRANCH_NAME}"
          if (env.BRANCH_NAME != 'dev') {
            currentBuild.result = 'NOT_BUILT'
            error("Skipping analysis: not running on 'dev' branch.")
          }
        }
      }
    }

    stage('Detect .go changes compared to main') {
      steps {
        script {
          sh "git fetch origin main"

          def changed = sh(script: '''
            git diff --name-only origin/main...HEAD | grep '\\.go$' || true
          ''', returnStdout: true).trim()

          if (changed) {
            writeFile file: 'changed-go-files.txt', text: changed
            echo "Detected changed .go files:\n${changed}"
            env.HAS_GO_CHANGES = "true"
          } else {
            echo "No .go files changed. Aborting analysis."
            currentBuild.result = 'NOT_BUILT'
            error("No .go changes to analyze.")
          }
        }
      }
    }

    stage('SonarQube Analysis') {
      when {
        environment name: 'HAS_GO_CHANGES', value: 'true'
      }
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          sh '''
            # Перевірка чи Java доступна
            java -version

            sonar-scanner \
              -Dsonar.projectKey=gitea \
              -Dsonar.sources=. \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_TOKEN \
              -Dsonar.inclusions=$(cat changed-go-files.txt | tr '\\n' ',' | sed 's/,\$//')
          '''
        }
      }
    }

    stage('Archive Sonar Report') {
      steps {
        sh '''
          mkdir -p artifacts
          if [ -f .scannerwork/report-task.txt ]; then
            cp .scannerwork/report-task.txt artifacts/
          else
            echo 'No report generated.' > artifacts/no-report.txt
          fi
        '''
        archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
      }
    }
  }
}
