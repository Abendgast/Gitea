pipeline {
    agent any

    parameters {
        string(
            name: 'IMAGE_NAME',
            defaultValue: 'gitea-app',
            description: 'Docker image name (e.g., gitea-app, my-service)'
        )
        string(
            name: 'DEV_IMAGE_TAG',
            defaultValue: '',
            description: 'Dev image tag to promote (e.g., dev-202501241030-a1b2c3d)'
        )
        booleanParam(
            name: 'CONFIRM_DEPLOY',
            defaultValue: false,
            description: 'Confirm deployment to production'
        )
    }

    environment {
        DOCKER_REGISTRY = '680833125636.dkr.ecr.us-east-1.amazonaws.com'
        AWS_REGION = 'us-east-1'
    }

    options {
        timestamps()
        timeout(time: 10, unit: 'MINUTES')
        skipDefaultCheckout()
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    if (!params.DEV_IMAGE_TAG) {
                        error('DEV_IMAGE_TAG parameter is required')
                    }
                    if (!params.CONFIRM_DEPLOY) {
                        error('CONFIRM_DEPLOY must be checked to proceed')
                    }
                    if (!params.DEV_IMAGE_TAG.startsWith('dev-')) {
                        error('DEV_IMAGE_TAG must start with "dev-"')
                    }

                    env.ECR_REGISTRY = "${env.DOCKER_REGISTRY}/${params.IMAGE_NAME}"
                    def timestamp = sh(script: "date '+%Y%m%d%H%M'", returnStdout: true).trim()
                    env.PROD_TAG = "prod-${timestamp}"

                    echo "Image name: ${params.IMAGE_NAME}"
                    echo "Source image: ${env.ECR_REGISTRY}:${params.DEV_IMAGE_TAG}"
                    echo "Target prod image: ${env.ECR_REGISTRY}:${env.PROD_TAG}"
                }
            }
        }

        stage('Verify Source Image') {
            steps {
                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    script {
                        def imageExists = sh(
                            script: """
                                aws ecr describe-images \
                                    --repository-name ${params.IMAGE_NAME} \
                                    --image-ids imageTag=${params.DEV_IMAGE_TAG} \
                                    --region ${env.AWS_REGION} \
                                    --query 'imageDetails[0].imageTags' \
                                    --output text 2>/dev/null || echo "NOT_FOUND"
                            """,
                            returnStdout: true
                        ).trim()

                        if (imageExists == "NOT_FOUND") {
                            error("Image ${params.DEV_IMAGE_TAG} not found in ECR repository ${params.IMAGE_NAME}")
                        }
                        echo "Source image verified: ${params.DEV_IMAGE_TAG} in ${params.IMAGE_NAME}"
                    }
                }
            }
        }

        stage('Pull and Retag') {
            steps {
                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    sh '''
                        echo "Logging into ECR..."
                        aws ecr get-login-password --region $AWS_REGION | \
                            docker login --username AWS --password-stdin $DOCKER_REGISTRY

                        echo "Pulling dev image: $ECR_REGISTRY:$DEV_IMAGE_TAG"
                        docker pull $ECR_REGISTRY:$DEV_IMAGE_TAG

                        echo "Creating prod tag: $ECR_REGISTRY:$PROD_TAG"
                        docker tag $ECR_REGISTRY:$DEV_IMAGE_TAG $ECR_REGISTRY:$PROD_TAG
                    '''
                }
            }
        }

        stage('Push Production Tag') {
            steps {
                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    sh '''
                        echo "Pushing production image: $ECR_REGISTRY:$PROD_TAG"
                        docker push $ECR_REGISTRY:$PROD_TAG

                        echo "SUCCESS: Production image pushed!"
                        echo "Dev image (unchanged): $ECR_REGISTRY:$DEV_IMAGE_TAG"
                        echo "Prod image (new): $ECR_REGISTRY:$PROD_TAG"
                    '''
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh """
                    echo "Cleaning up local images..."
                    docker rmi ${env.ECR_REGISTRY}:${params.DEV_IMAGE_TAG} || true
                    docker rmi ${env.ECR_REGISTRY}:${env.PROD_TAG} || true
                    echo "Local cleanup completed"
                """
            }
        }
    }

    post {
        success {
            echo """
=== PROMOTION SUCCESSFUL ===
Image Name: ${params.IMAGE_NAME}
Dev image (unchanged): ${env.ECR_REGISTRY}:${params.DEV_IMAGE_TAG}
Prod image (new): ${env.ECR_REGISTRY}:${env.PROD_TAG}

Ready for production deployment!
"""
        }
        failure {
            echo """
=== PROMOTION FAILED ===
Image Name: ${params.IMAGE_NAME}
Attempted promotion of: ${env.ECR_REGISTRY}:${params.DEV_IMAGE_TAG}
Check logs above for details.
"""
        }
        always {
            sh """
                echo "Final cleanup..."
                docker rmi ${env.ECR_REGISTRY}:${params.DEV_IMAGE_TAG} || true
                docker rmi ${env.ECR_REGISTRY}:${env.PROD_TAG} || true
            """
        }
    }
}
