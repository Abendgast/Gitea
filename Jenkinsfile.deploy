pipeline {
    agent any

    parameters {
        extendedChoice(
            name: 'DEV_IMAGE_TAG',
            type: 'PT_SINGLE_SELECT',
            description: 'Select dev image tag to promote',
            multiSelectDelimiter: ',',
            groovyScript: '''
                import com.amazonaws.services.ecr.AmazonECRClientBuilder
                import com.amazonaws.services.ecr.model.ListImagesRequest
                import com.amazonaws.services.ecr.model.ImageIdentifier
                import com.amazonaws.regions.Regions

                try {
                    def ecrClient = AmazonECRClientBuilder.standard()
                        .withRegion(Regions.US_EAST_1)
                        .build()

                    def request = new ListImagesRequest()
                        .withRepositoryName('gitea-app')
                        .withFilter(new com.amazonaws.services.ecr.model.ListImagesFilter()
                            .withTagStatus('TAGGED'))

                    def result = ecrClient.listImages(request)

                    def tags = result.imageIds
                        .findAll { it.imageTag && it.imageTag.startsWith('dev-') }
                        .collect { it.imageTag }
                        .sort { a, b -> b.compareTo(a) } // Sort descending (newest first)
                        .take(20) // Limit to 20 most recent

                    return tags
                } catch (Exception e) {
                    return ["Error: ${e.message}"]
                }
            '''
        )
        booleanParam(
            name: 'CONFIRM_DEPLOY',
            defaultValue: false,
            description: 'Confirm deployment to production'
        )
    }

    environment {
        REGISTRY = '680833125636.dkr.ecr.us-east-1.amazonaws.com/gitea-app'
        AWS_REGION = 'us-east-1'
    }

    options {
        timestamps()
        timeout(time: 10, unit: 'MINUTES')
        skipDefaultCheckout()
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    if (!params.DEV_IMAGE_TAG) {
                        error('DEV_IMAGE_TAG parameter is required')
                    }
                    if (!params.CONFIRM_DEPLOY) {
                        error('CONFIRM_DEPLOY must be checked to proceed')
                    }
                    if (!params.DEV_IMAGE_TAG.startsWith('dev-')) {
                        error('DEV_IMAGE_TAG must start with "dev-"')
                    }

                    def timestamp = sh(script: "date '+%Y%m%d%H%M'", returnStdout: true).trim()
                    env.PROD_TAG = "prod-${timestamp}"

                    echo "Promoting: ${env.REGISTRY}:${params.DEV_IMAGE_TAG}"
                    echo "Target: ${env.REGISTRY}:${env.PROD_TAG}"
                }
            }
        }

        stage('Verify Source Image') {
            steps {
                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    script {
                        def imageExists = sh(
                            script: """
                                aws ecr describe-images \
                                    --repository-name gitea-app \
                                    --image-ids imageTag=${params.DEV_IMAGE_TAG} \
                                    --region ${env.AWS_REGION} \
                                    --query 'imageDetails[0].imageTags' \
                                    --output text 2>/dev/null || echo "NOT_FOUND"
                            """,
                            returnStdout: true
                        ).trim()

                        if (imageExists == "NOT_FOUND") {
                            error("Image ${params.DEV_IMAGE_TAG} not found in ECR")
                        }
                        echo "Source image verified: ${params.DEV_IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Pull and Tag') {
            steps {
                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    sh '''
                        aws ecr get-login-password --region $AWS_REGION | \
                            docker login --username AWS --password-stdin $REGISTRY

                        docker pull $REGISTRY:$DEV_IMAGE_TAG

                        docker tag $REGISTRY:$DEV_IMAGE_TAG $REGISTRY:$PROD_TAG
                    '''
                }
            }
        }

        stage('Push to Production ECR') {
            steps {
                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    sh '''
                        aws ecr get-login-password --region $AWS_REGION | \
                            docker login --username AWS --password-stdin $REGISTRY

                        docker push $REGISTRY:$PROD_TAG

                        echo "Production image: $REGISTRY:$PROD_TAG"
                    '''
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh """
                    docker rmi ${env.REGISTRY}:${params.DEV_IMAGE_TAG} || true
                    docker rmi ${env.REGISTRY}:${env.PROD_TAG} || true
                """
            }
        }
    }

    post {
        success {
            echo "SUCCESS: Image promoted to production"
            echo "Production image: ${env.REGISTRY}:${env.PROD_TAG}"
            echo "From dev image: ${env.REGISTRY}:${params.DEV_IMAGE_TAG}"
        }
        failure {
            echo "FAILURE: Production deployment failed"
        }
    }
}
