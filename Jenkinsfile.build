pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = '680833125636.dkr.ecr.us-east-1.amazonaws.com/gitea-app'
        IMAGE_NAME = 'gitea-app'
        AWS_REGION = 'us-east-1'
        SONAR_PROJECT_KEY = 'Abendgast_Gitea'
        SONAR_ORGANIZATION = 'abendgast'
    }

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
        skipDefaultCheckout()
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            when {
                branch 'dev'
            }
            steps {
                checkout scm
                script {
                    echo "Building from dev branch"
                    echo "Commit: ${env.GIT_COMMIT}"

                    // Отримуємо список змінених файлів
                    def changedFiles = sh(
                        script: '''
                            if [ "$GIT_PREVIOUS_COMMIT" != "" ]; then
                                git diff --name-only $GIT_PREVIOUS_COMMIT $GIT_COMMIT
                            else
                                git show --pretty="" --name-only HEAD
                            fi
                        ''',
                        returnStdout: true
                    ).trim()

                    env.CHANGED_FILES = changedFiles
                    echo "Changed files:\n${changedFiles}"

                    // Перевіряємо чи є Go файли серед змінених
                    def hasGoFiles = sh(
                        script: 'echo "$CHANGED_FILES" | grep -E "\\.(go)$" || echo "false"',
                        returnStdout: true
                    ).trim()

                    env.HAS_GO_CHANGES = hasGoFiles != "false" ? "true" : "false"
                    echo "Has Go file changes: ${env.HAS_GO_CHANGES}"
                }
            }
        }

        stage('Setup Go Environment') {
            when {
                allOf {
                    branch 'dev'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                sh '''
                    # Встановлюємо залежності Go (якщо потрібно)
                    if [ -f "go.mod" ]; then
                        go mod download
                        go mod tidy
                    fi
                '''
            }
        }

        stage('Run Tests') {
            when {
                allOf {
                    branch 'dev'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                sh '''
                    # Запускаємо тести з coverage
                    go test -v -coverprofile=coverage.out ./...

                    # Конвертуємо coverage в XML формат для SonarCloud
                    go tool cover -func=coverage.out
                '''
            }
        }

        stage('SonarCloud Analysis') {
            when {
                allOf {
                    branch 'dev'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                withSonarQubeEnv('SonarCloud') {
                    sh '''
                        # Створюємо sonar-project.properties якщо його немає
                        if [ ! -f "sonar-project.properties" ]; then
                            cat > sonar-project.properties << EOF
sonar.projectKey=${SONAR_PROJECT_KEY}
sonar.organization=${SONAR_ORGANIZATION}
sonar.sources=.
sonar.exclusions=**/*_test.go,**/vendor/**,**/testdata/**
sonar.tests=.
sonar.test.inclusions=**/*_test.go
sonar.go.coverage.reportPaths=coverage.out
sonar.sourceEncoding=UTF-8
EOF
                        fi

                        # Запускаємо SonarCloud аналіз
                        sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.organization=${SONAR_ORGANIZATION} \
                            -Dsonar.host.url=https://sonarcloud.io \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.scm.revision=${GIT_COMMIT} \
                            -Dsonar.pullrequest.branch=${BRANCH_NAME} \
                            -Dsonar.go.coverage.reportPaths=coverage.out
                    '''
                }
            }
        }

        stage('Quality Gate') {
            when {
                allOf {
                    branch 'dev'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                        echo "Quality Gate passed successfully!"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            when {
                branch 'dev'
            }
            steps {
                script {
                    def shortCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    def timestamp = sh(script: "date '+%Y%m%d%H%M'", returnStdout: true).trim()

                    env.IMAGE_TAG = "dev-${timestamp}-${shortCommit}"

                    echo "Building image: ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                    echo "Build context: current directory (from GitHub)"

                    sh """
                        docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} .
                        docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}
                    """
                }
            }
        }

        stage('Push to ECR') {
            when {
                branch 'dev'
            }
            steps {
                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    sh '''
                        aws ecr get-login-password --region $AWS_REGION | \
                            docker login --username AWS --password-stdin $DOCKER_REGISTRY

                        docker push $DOCKER_REGISTRY:$IMAGE_TAG

                        echo "Image pushed: $DOCKER_REGISTRY:$IMAGE_TAG"
                    '''
                }
            }
        }

        stage('Cleanup') {
            when {
                branch 'dev'
            }
            steps {
                sh """
                    docker rmi ${env.IMAGE_NAME}:${env.IMAGE_TAG} || true
                    docker rmi ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG} || true

                    # Очищуємо тестові файли
                    rm -f coverage.out || true
                """
            }
        }
    }

    post {
        success {
            script {
                if (env.BRANCH_NAME == 'dev') {
                    def message = "SUCCESS: Dev image built and pushed: ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}"
                    if (env.HAS_GO_CHANGES == 'true') {
                        message += "\n✅ SonarCloud quality gate passed"
                    } else {
                        message += "\n⏭️ No Go files changed, SonarCloud analysis skipped"
                    }
                    echo message
                } else {
                    echo "Skipped: Not dev branch"
                }
            }
        }
        failure {
            script {
                def message = "FAILURE: Build failed"
                if (env.HAS_GO_CHANGES == 'true') {
                    message += "\n❌ Check SonarCloud quality gate or tests"
                }
                echo message
            }
        }
        always {
            // Публікуємо test results якщо є
            publishTestResults([
                testResultsPattern: '**/test-results.xml',
                allowEmptyResults: true
            ])
        }
    }
}
