pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = '680833125636.dkr.ecr.us-east-1.amazonaws.com/gitea-app'
        IMAGE_NAME = 'gitea-app'
        AWS_REGION = 'us-east-1'
        SONAR_PROJECT_KEY = 'Abendgast_Gitea'
        SONAR_ORGANIZATION = 'abendgast'
        PATH = "/usr/local/go/bin:${env.PATH}"
        JAVA_HOME = '/usr/local/java17'
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        skipDefaultCheckout()
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            when {
                branch 'main'
            }
            steps {
                checkout scm
                script {
                    echo "Building from main branch"
                    env.GIT_COMMIT = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                    echo "Commit: ${env.GIT_COMMIT}"

                    def changedFiles = sh(
                        script: '''
                            if [ -n "$GIT_PREVIOUS_COMMIT" ]; then
                                git diff --name-only $GIT_PREVIOUS_COMMIT $GIT_COMMIT | grep -E "\\.(go)$" || echo ""
                            else
                                git show --pretty="" --name-only HEAD | grep -E "\\.(go)$" || echo ""
                            fi
                        ''',
                        returnStdout: true
                    ).trim()

                    env.CHANGED_GO_FILES = changedFiles
                    echo "Changed Go files:\n${changedFiles}"

                    def hasGoFiles = changedFiles != ""
                    env.HAS_GO_CHANGES = hasGoFiles ? "true" : "false"
                    echo "Has Go file changes: ${env.HAS_GO_CHANGES}"
                }
            }
        }

        stage('Setup Java 17') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                sh '''
                    echo "Setting up Java 17 for SonarCloud..."

                    if [ -d "/usr/local/java17" ] && /usr/local/java17/bin/java -version 2>&1 | grep -q "17\\."; then
                        echo "Java 17 already installed"
                    else
                        echo "Installing Java 17..."
                        cd /tmp

                        curl -L -o openjdk-17_linux-x64_bin.tar.gz https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz

                        mkdir -p /usr/local/java17
                        tar --strip-components=1 -C /usr/local/java17 -xzf openjdk-17_linux-x64_bin.tar.gz

                        rm -f openjdk-17_linux-x64_bin.tar.gz

                        echo "Java 17 installed successfully"
                    fi

                    /usr/local/java17/bin/java -version

                    export JAVA_HOME=/usr/local/java17
                    export PATH=$JAVA_HOME/bin:$PATH
                '''
            }
        }

        stage('Setup Go Environment') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                sh '''
                    echo "Setting up Go environment..."

                    # Видаляємо старі версії Go якщо потрібно
                    if command -v go &> /dev/null; then
                        CURRENT_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
                        if [ "$CURRENT_VERSION" != "1.21.5" ]; then
                            echo "Removing old Go version: $CURRENT_VERSION"
                            rm -rf /usr/local/go || true
                        fi
                    fi

                    if [ ! -d "/usr/local/go" ] || ! /usr/local/go/bin/go version 2>&1 | grep -q "go1.21.5"; then
                        echo "Installing Go 1.21.5..."
                        cd /tmp
                        curl -L -o go1.21.5.linux-amd64.tar.gz https://go.dev/dl/go1.21.5.linux-amd64.tar.gz
                        tar -C /usr/local -xzf go1.21.5.linux-amd64.tar.gz
                        rm go1.21.5.linux-amd64.tar.gz
                        echo "Go installed successfully"
                    else
                        echo "Go 1.21.5 already installed"
                    fi

                    /usr/local/go/bin/go version

                    if [ ! -f "go.mod" ]; then
                        echo "Initializing Go module..."
                        /usr/local/go/bin/go mod init code.gitea.io/gitea
                    fi

                    echo "Installing Go dependencies..."
                    /usr/local/go/bin/go mod download || echo "No dependencies to download"
                    /usr/local/go/bin/go mod tidy || echo "Module tidy completed"
                '''
            }
        }

        stage('Run Tests') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                sh '''
                    echo "Running comprehensive Go tests for main branch..."

                    # Для main бренчі запускаємо повний набір тестів
                    export GITEA_CONF=""
                    export USER=gitea
                    export HOME=/tmp/gitea-home
                    mkdir -p $HOME

                    # Генеруємо coverage звіт
                    echo "Running tests with coverage..."
                    /usr/local/go/bin/go test -v ./... -coverprofile=coverage.out -covermode=atomic 2>/dev/null || true

                    if [ -f "coverage.out" ]; then
                        echo "Coverage report generated"
                        /usr/local/go/bin/go tool cover -func coverage.out | tail -n 1
                    else
                        echo "No coverage report generated"
                    fi

                    echo "Test execution completed"
                '''
            }
        }

        stage('SonarCloud Analysis') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                withSonarQubeEnv('SonarCloud') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        sh '''
                            echo "Setting up SonarScanner with Java 17..."

                            export JAVA_HOME=/usr/local/java17
                            export PATH=$JAVA_HOME/bin:$PATH

                            echo "Using Java version:"
                            java -version

                            # Очищуємо попередні установки
                            rm -rf /usr/local/sonar-scanner /usr/local/bin/sonar-scanner || true
                            rm -rf /tmp/sonar-scanner* || true

                            echo "Installing latest SonarScanner compatible with Java 17..."
                            cd /tmp
                            curl -L -o sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
                            unzip -o sonar-scanner-cli.zip
                            mv sonar-scanner-5.0.1.3006-linux /usr/local/sonar-scanner
                            ln -sf /usr/local/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
                            chmod +x /usr/local/bin/sonar-scanner
                            rm -f sonar-scanner-cli.zip
                            echo "SonarScanner installed successfully"

                            echo "Preparing comprehensive SonarCloud analysis for main branch..."

                            # Для main бренчі аналізуємо всі Go файли
                            all_go_files=$(find . -name "*.go" -not -path "./vendor/*" -not -name "*_test.go" | tr '\n' ',' | sed 's/,$//')

                            echo "All Go source files for analysis: $all_go_files"

                            if [ -z "$all_go_files" ]; then
                                echo "No Go source files found, skipping SonarCloud analysis"
                                exit 0
                            fi

                            # Створюємо sonar-project.properties для main бренчі
                            cat > sonar-project.properties << EOF
sonar.projectKey=${SONAR_PROJECT_KEY}
sonar.organization=${SONAR_ORGANIZATION}
sonar.sourceEncoding=UTF-8
sonar.sources=$all_go_files
sonar.language=go
sonar.go.coverage.reportPaths=coverage.out
sonar.exclusions=**/*_test.go,**/vendor/**,**/*.pb.go
sonar.projectVersion=main-${BUILD_NUMBER}
EOF

                            echo "Running comprehensive SonarCloud analysis for main branch..."
                            echo "Analyzing all Go source files"

                            JAVA_HOME=/usr/local/java17 PATH=/usr/local/java17/bin:$PATH /usr/local/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                -Dsonar.organization=${SONAR_ORGANIZATION} \
                                -Dsonar.host.url=https://sonarcloud.io \
                                -Dsonar.token=${SONAR_TOKEN} \
                                -Dsonar.scm.revision=${GIT_COMMIT} \
                                -Dsonar.branch.name=${BRANCH_NAME} \
                                -Dsonar.verbose=false \
                                -Dsonar.projectVersion=main-${BUILD_NUMBER}
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    script {
                        try {
                            echo "Waiting for SonarCloud Quality Gate result for main branch..."

                            // Додаємо затримку перед перевіркою
                            sleep(45)

                            def qg = waitForQualityGate(abortPipeline: false)

                            if (qg.status != 'OK') {
                                echo "Quality Gate failed: ${qg.status}"
                                echo "Check SonarCloud dashboard for details: https://sonarcloud.io/project/overview?id=${env.SONAR_PROJECT_KEY}"

                                // Додаємо детальну інформацію про помилки
                                if (qg.conditions) {
                                    echo "Failed conditions:"
                                    qg.conditions.each { condition ->
                                        if (condition.status != 'OK') {
                                            echo "- ${condition.metricKey}: ${condition.actualValue} (threshold: ${condition.errorThreshold})"
                                        }
                                    }
                                }

                                // Для main бренчі Quality Gate критичний
                                currentBuild.result = 'FAILURE'
                                error "Quality Gate failed with status: ${qg.status}. Main branch deployment blocked."
                            } else {
                                echo "Quality Gate passed successfully for main branch!"
                                echo "View detailed report: https://sonarcloud.io/project/overview?id=${env.SONAR_PROJECT_KEY}"
                            }
                        } catch (Exception e) {
                            echo "Quality Gate check failed: ${e.getMessage()}"

                            // Перевіряємо чи це timeout
                            if (e.getMessage().contains('timeout') || e.getMessage().contains('Timeout')) {
                                echo "Quality Gate check timed out - this might be a temporary SonarCloud issue"
                                echo "Check SonarCloud dashboard manually: https://sonarcloud.io/project/overview?id=${env.SONAR_PROJECT_KEY}"

                                // Для main бренчі timeout також критичний
                                currentBuild.result = 'FAILURE'
                                error "Quality Gate timeout on main branch - deployment blocked for safety"
                            } else {
                                currentBuild.result = 'FAILURE'
                                error "Pipeline failed due to Quality Gate issues. Main branch deployment blocked."
                            }
                        }
                    }
                }
            }
        }

        stage('Build Production Docker Image') {
            when {
                allOf {
                    branch 'main'
                    not {
                        expression { currentBuild.result == 'FAILURE' }
                    }
                }
            }
            steps {
                script {
                    def shortCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    def timestamp = sh(script: "date '+%Y%m%d%H%M'", returnStdout: true).trim()
                    def buildNumber = env.BUILD_NUMBER

                    // Для main бренчі створюємо теги для production
                    env.IMAGE_TAG = "v${buildNumber}-${timestamp}-${shortCommit}"
                    env.LATEST_TAG = "latest"

                    echo "Building production Docker image for main branch..."
                    echo "Image name: ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                    echo "Registry: ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}"
                    echo "Also tagging as: ${env.DOCKER_REGISTRY}:${env.LATEST_TAG}"

                    sh """
                        docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} .
                        docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}
                        docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.DOCKER_REGISTRY}:${env.LATEST_TAG}
                    """

                    echo "Production Docker image built successfully"
                }
            }
        }

        stage('Push to ECR Production') {
            when {
                allOf {
                    branch 'main'
                    not {
                        expression { currentBuild.result == 'FAILURE' }
                    }
                }
            }
            steps {
                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    sh '''
                        echo "Logging into ECR for production deployment..."
                        aws ecr get-login-password --region $AWS_REGION | \
                            docker login --username AWS --password-stdin $DOCKER_REGISTRY

                        echo "Pushing production images to ECR..."
                        docker push $DOCKER_REGISTRY:$IMAGE_TAG
                        docker push $DOCKER_REGISTRY:$LATEST_TAG

                        echo "Production images pushed successfully:"
                        echo "  - $DOCKER_REGISTRY:$IMAGE_TAG"
                        echo "  - $DOCKER_REGISTRY:$LATEST_TAG"
                    '''
                }
            }
        }

        stage('Generate Production Report') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                script {
                    def reportStatus = currentBuild.result ?: 'SUCCESS'
                    def timestamp = new Date().format('yyyy-MM-dd HH:mm:ss')

                    writeFile file: 'production-release-report.txt', text: """
Production Release Report - Main Branch
=======================================
Project: ${env.SONAR_PROJECT_KEY}
Organization: ${env.SONAR_ORGANIZATION}
Branch: ${env.BRANCH_NAME}
Commit: ${env.GIT_COMMIT}
Build Number: ${env.BUILD_NUMBER}
Timestamp: ${timestamp}

Quality Assurance:
- Go Files Analyzed: ALL
- Quality Gate Status: ${reportStatus}
- Analysis URL: https://sonarcloud.io/project/overview?id=${env.SONAR_PROJECT_KEY}

Production Deployment:
- Pipeline Result: ${reportStatus}
- Production Image: ${env.IMAGE_TAG ? "${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}" : "NOT CREATED - Quality Gate Failed"}
- Latest Tag: ${env.LATEST_TAG ? "${env.DOCKER_REGISTRY}:${env.LATEST_TAG}" : "NOT CREATED - Quality Gate Failed"}

Release Notes:
- This is a production-ready release from main branch
- Full test suite executed with coverage analysis
- Comprehensive SonarCloud quality analysis completed
- Production Docker images available in ECR
"""

                    archiveArtifacts artifacts: 'production-release-report.txt', fingerprint: true
                    echo "Production release report generated and archived"
                }
            }
        }

        stage('Cleanup') {
            when {
                branch 'main'
            }
            steps {
                sh """
                    echo "Cleaning up local Docker images..."
                    docker rmi ${env.IMAGE_NAME}:${env.IMAGE_TAG} || true
                    docker rmi ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG} || true
                    docker rmi ${env.DOCKER_REGISTRY}:${env.LATEST_TAG} || true

                    rm -f coverage.out || true

                    echo "Cleanup completed"
                """
            }
        }
    }

    post {
        success {
            script {
                if (env.BRANCH_NAME == 'main') {
                    def message = "SUCCESS: Production pipeline completed successfully"

                    if (env.HAS_GO_CHANGES == 'true') {
                        message += "\nComprehensive SonarCloud analysis completed and Quality Gate passed"
                        message += "\nFull test suite executed with coverage analysis"
                        message += "\nView analysis: https://sonarcloud.io/project/overview?id=${env.SONAR_PROJECT_KEY}"
                    } else {
                        message += "\nNo Go files changed, SonarCloud analysis skipped"
                    }

                    if (env.IMAGE_TAG) {
                        message += "\nProduction images pushed to ECR:"
                        message += "\n  - ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}"
                        message += "\n  - ${env.DOCKER_REGISTRY}:${env.LATEST_TAG}"
                    }

                    echo message
                } else {
                    echo "Skipped: Not main branch"
                }
            }
        }

        failure {
            script {
                def message = "FAILURE: Production pipeline failed"

                if (env.HAS_GO_CHANGES == 'true') {
                    message += "\nSonarCloud Quality Gate FAILED - Production deployment blocked"
                    message += "\nCheck SonarCloud dashboard: https://sonarcloud.io/project/overview?id=${env.SONAR_PROJECT_KEY}"
                    message += "\nProduction Docker images were NOT pushed to ECR"
                } else {
                    message += "\nProduction pipeline failed for other reasons"
                }

                message += "\nImmediate action required for main branch failure"

                echo message
            }
        }

        unstable {
            script {
                def message = "UNSTABLE: Production pipeline completed with warnings"
                message += "\nThis should not happen on main branch - investigate immediately"

                if (env.HAS_GO_CHANGES == 'true') {
                    message += "\nCheck SonarCloud dashboard: https://sonarcloud.io/project/overview?id=${env.SONAR_PROJECT_KEY}"
                }

                echo message
            }
        }

        always {
            script {
                echo "Production pipeline execution completed"
                echo "Duration: ${currentBuild.durationString}"

                if (fileExists('**/test-results.xml')) {
                    publishTestResults([
                        testResultsPattern: '**/test-results.xml',
                        allowEmptyResults: true
                    ])
                }

                sh '''
                    rm -f sonar-project.properties || true
                    rm -f coverage.out || true
                '''

                // Для main бренчі додаємо додаткове логування
                if (env.BRANCH_NAME == 'main') {
                    echo "=== PRODUCTION DEPLOYMENT SUMMARY ==="
                    echo "Branch: ${env.BRANCH_NAME}"
                    echo "Status: ${currentBuild.result ?: 'SUCCESS'}"
                    echo "Build: ${env.BUILD_NUMBER}"
                    echo "Commit: ${env.GIT_COMMIT}"
                    if (env.IMAGE_TAG) {
                        echo "Image: ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}"
                    }
                    echo "===================================="
                }
            }
        }
    }
}
