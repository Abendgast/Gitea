pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = '680833125636.dkr.ecr.us-east-1.amazonaws.com/gitea-app'
        IMAGE_NAME = 'gitea-app'
        AWS_REGION = 'us-east-1'
        SONAR_PROJECT_KEY = 'Abendgast_Gitea'
        SONAR_ORGANIZATION = 'abendgast'
        PATH = "/usr/local/go/bin:${env.PATH}"
        JAVA_HOME = '/usr/local/java17'
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        skipDefaultCheckout()
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            when { branch 'main' }
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()

                    def changedFiles = sh(
                        script: '''
                            git show --pretty="" --name-only $GIT_COMMIT | grep -E '\\.go$' || echo ""
                        ''',
                        returnStdout: true
                    ).trim()

                    env.CHANGED_GO_FILES = changedFiles
                    echo "Changed Go files: ${changedFiles}"

                    def hasGoFiles = changedFiles != ""
                    env.HAS_GO_CHANGES = hasGoFiles ? "true" : "false"
                }
            }
        }

        stage('Setup Environment') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                sh '''
                    echo "Setting up Go and Java..."
                    # Java setup (simplified)
                    mkdir -p /usr/local/java17 || true
                    # Go setup (simplified)
                    mkdir -p /usr/local/go || true
                    echo "Java and Go folders prepared."
                '''
            }
        }

        stage('SonarCloud Analysis') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                withSonarQubeEnv('SonarCloud') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        sh '''
                            echo "Running SonarCloud analysis only on changed Go files..."

                            SONAR_INCLUSIONS=$(echo "$CHANGED_GO_FILES" | paste -sd "," -)
                            echo "Files for analysis: $SONAR_INCLUSIONS"

                            sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                -Dsonar.organization=${SONAR_ORGANIZATION} \
                                -Dsonar.host.url=https://sonarcloud.io \
                                -Dsonar.token=${SONAR_TOKEN} \
                                -Dsonar.sources=. \
                                -Dsonar.inclusions="$SONAR_INCLUSIONS" \
                                -Dsonar.language=go \
                                -Dsonar.go.coverage.reportPaths=coverage.out \
                                -Dsonar.exclusions="**/*_test.go,**/vendor/**,**/*.pb.go" \
                                -Dsonar.scm.revision=${GIT_COMMIT} \
                                -Dsonar.branch.name=${BRANCH_NAME} \
                                -Dsonar.projectVersion=main-${BUILD_NUMBER} \
                                -Dsonar.verbose=true
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate(abortPipeline: false)
                        if (qg.status != 'OK') {
                            error("Quality Gate failed: ${qg.status}")
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            when {
                allOf {
                    branch 'main'
                    not {
                        expression { currentBuild.result == 'FAILURE' }
                    }
                }
            }
            steps {
                script {
                    def shortCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    def timestamp = sh(script: "date '+%Y-%m-%d_%H%M'", returnStdout: true).trim()
                    def buildNumber = env.BUILD_NUMBER

                    env.IMAGE_TAG = "dev-${timestamp}-${shortCommit}"
                    env.LATEST_TAG = "dev-latest"

                    echo "Building Docker image: ${env.IMAGE_NAME}:${env.IMAGE_TAG}"

                    sh """
                        docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} .
                        docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}
                        docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.DOCKER_REGISTRY}:${env.LATEST_TAG}
                    """
                }

            }
        }

        stage('Push to ECR') {
            when {
                allOf {
                    branch 'main'
                    not {
                        expression { currentBuild.result == 'FAILURE' }
                    }
                }
            }
            steps {
                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    sh '''
                        echo "Pushing to ECR..."
                        aws ecr get-login-password --region $AWS_REGION | \
                            docker login --username AWS --password-stdin $DOCKER_REGISTRY

                        docker push $DOCKER_REGISTRY:$IMAGE_TAG
                        docker push $DOCKER_REGISTRY:$LATEST_TAG

                        echo "Images pushed:"
                        echo "  - $DOCKER_REGISTRY:$IMAGE_TAG"
                        echo "  - $DOCKER_REGISTRY:$LATEST_TAG"
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                def status = currentBuild.currentResult
                def color = (status == 'SUCCESS') ? 3066993 : 15158332  // зелений або червоний
                def shortCommit = env.GIT_COMMIT?.take(7) ?: 'unknown'
                def webhookMessage = """
                {
                  "embeds": [{
                    "title": "Jenkins Pipeline Notification",
                    "description": "**Status:** ${status}\\n**Branch:** ${env.BRANCH_NAME}\\n**Commit:** ${shortCommit}\\n**Build URL:** [View Build](${env.BUILD_URL})",
                    "color": ${color}
                  }]
                }
                """

                withCredentials([string(credentialsId: 'discord-webhook-url', variable: 'DISCORD_WEBHOOK')]) {
                    sh """
                      curl -X POST -H "Content-Type: application/json" \
                        -d '${webhookMessage}' \
                        "$DISCORD_WEBHOOK"
                    """
                }
            }
        }
    }

}
