pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = '680833125636.dkr.ecr.us-east-1.amazonaws.com/gitea-app'
        IMAGE_NAME = 'gitea-app'
        AWS_REGION = 'us-east-1'
    }

    options {
        timestamps()
        timeout(time: 15, unit: 'MINUTES')
        skipDefaultCheckout()
    }

    triggers {
        githubPush()
    }

    when {
        branch 'dev'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    echo "Building from dev branch"
                    echo "Commit: ${env.GIT_COMMIT}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def shortCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    def timestamp = sh(script: "date '+%Y%m%d%H%M'", returnStdout: true).trim()

                    env.IMAGE_TAG = "dev-${timestamp}-${shortCommit}"

                    echo "Building image: ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                    echo "Build context: current directory (from GitHub)"

                    sh """
                        docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} .
                        docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}
                    """
                }
            }
        }

        stage('Push to ECR') {
            steps {
                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    sh '''
                        aws ecr get-login-password --region $AWS_REGION | \
                            docker login --username AWS --password-stdin $DOCKER_REGISTRY

                        docker push $DOCKER_REGISTRY:$IMAGE_TAG

                        echo "Image pushed: $DOCKER_REGISTRY:$IMAGE_TAG"
                    '''
                }
            }
        }

        stage('Cleanup') {
            steps {
                sh """
                    docker rmi ${env.IMAGE_NAME}:${env.IMAGE_TAG} || true
                    docker rmi ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG} || true
                """
            }
        }
    }

    post {
        success {
            echo "SUCCESS: Dev image built and pushed: ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}"
        }
        failure {
            echo "FAILURE: Build failed"
        }
    }
}
