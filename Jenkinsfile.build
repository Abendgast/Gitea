pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = '680833125636.dkr.ecr.us-east-1.amazonaws.com/gitea-app'
        IMAGE_NAME = 'gitea-app'
        AWS_REGION = 'us-east-1'
        SONAR_PROJECT_KEY = 'Abendgast_Gitea'
        SONAR_ORGANIZATION = 'abendgast'
        PATH = "/usr/local/go/bin:/usr/local/java17/bin:${env.PATH}"
        JAVA_HOME = '/usr/local/java17'
    }

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
        skipDefaultCheckout()
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout & Detect Changes') {
            when { branch 'main' }
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()

                    def changedGoFiles = sh(
                        script: '''
                            if [ -n "$GIT_PREVIOUS_COMMIT" ]; then
                                git diff --name-only $GIT_PREVIOUS_COMMIT $GIT_COMMIT | grep -E "\\.go$" || true
                            else
                                git show --pretty="" --name-only HEAD | grep -E "\\.go$" || true
                            fi
                        ''',
                        returnStdout: true
                    ).trim()

                    env.CHANGED_GO_FILES = changedGoFiles
                    env.HAS_GO_CHANGES = changedGoFiles ? "true" : "false"

                    echo "Changed Go files: ${changedGoFiles ?: 'none'}"
                    echo "Will run analysis: ${env.HAS_GO_CHANGES}"
                }
            }
        }

        stage('Setup Environment') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                sh '''
                    # Setup Java 17
                    if [ ! -d "/usr/local/java17" ]; then
                        echo "Installing Java 17..."
                        cd /tmp
                        curl -sL -o openjdk-17.tar.gz https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
                        mkdir -p /usr/local/java17
                        tar --strip-components=1 -C /usr/local/java17 -xzf openjdk-17.tar.gz
                        rm -f openjdk-17.tar.gz
                    fi

                    # Setup Go 1.21.5
                    if [ ! -d "/usr/local/go" ] || ! /usr/local/go/bin/go version 2>&1 | grep -q "go1.21.5"; then
                        echo "Installing Go 1.21.5..."
                        cd /tmp
                        curl -sL -o go1.21.5.linux-amd64.tar.gz https://go.dev/dl/go1.21.5.linux-amd64.tar.gz
                        rm -rf /usr/local/go
                        tar -C /usr/local -xzf go1.21.5.linux-amd64.tar.gz
                        rm -f go1.21.5.linux-amd64.tar.gz
                    fi

                    # Setup SonarScanner
                    if [ ! -f "/usr/local/bin/sonar-scanner" ]; then
                        echo "Installing SonarScanner..."
                        cd /tmp
                        curl -sL -o sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
                        unzip -q sonar-scanner.zip
                        rm -rf /usr/local/sonar-scanner
                        mv sonar-scanner-5.0.1.3006-linux /usr/local/sonar-scanner
                        ln -sf /usr/local/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
                        chmod +x /usr/local/bin/sonar-scanner
                        rm -f sonar-scanner.zip
                    fi

                    # Initialize Go module if needed
                    if [ ! -f "go.mod" ]; then
                        /usr/local/go/bin/go mod init code.gitea.io/gitea
                    fi
                    /usr/local/go/bin/go mod tidy || true
                '''
            }
        }

        stage('Test Changed Files') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                sh '''
                    export USER=gitea
                    export HOME=/tmp/gitea-home
                    mkdir -p $HOME

                    echo "Testing changed Go files..."

                    # Get unique directories of changed files
                    PACKAGES=""
                    for file in ${CHANGED_GO_FILES}; do
                        if [ -f "$file" ]; then
                            dir=$(dirname "$file")
                            # Add unique directories
                            if ! echo "$PACKAGES" | grep -q "$dir"; then
                                PACKAGES="$PACKAGES ./$dir"
                            fi
                        fi
                    done

                    PACKAGES=$(echo $PACKAGES | tr ' ' '\n' | sort | uniq | tr '\n' ' ')
                    echo "Testing packages: $PACKAGES"

                    if [ -n "$PACKAGES" ]; then
                        /usr/local/go/bin/go test -v $PACKAGES -coverprofile=coverage.out -covermode=atomic || true
                    else
                        echo "mode: atomic" > coverage.out
                    fi
                '''
            }
        }

        stage('SonarCloud Analysis') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                withSonarQubeEnv('SonarCloud') {
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                        sh '''
                            # Get unique directories for sonar.sources
                            SONAR_DIRS=""
                            for file in ${CHANGED_GO_FILES}; do
                                dir=$(dirname "$file")
                                if [ "$dir" = "." ]; then
                                    dir="."
                                fi
                                if ! echo "$SONAR_DIRS" | grep -q "$dir"; then
                                    SONAR_DIRS="$SONAR_DIRS,$dir"
                                fi
                            done

                            # Clean up the directory list
                            SONAR_DIRS=$(echo "$SONAR_DIRS" | sed 's/^,//' | sed 's/,,*/,/g')

                            # If only root files, use current directory
                            if [ "$SONAR_DIRS" = "." ]; then
                                SONAR_DIRS="."
                            fi

                            echo "SonarCloud analyzing directories: $SONAR_DIRS"

                            /usr/local/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                -Dsonar.organization=${SONAR_ORGANIZATION} \
                                -Dsonar.host.url=https://sonarcloud.io \
                                -Dsonar.token=${SONAR_TOKEN} \
                                -Dsonar.sources="$SONAR_DIRS" \
                                -Dsonar.language=go \
                                -Dsonar.go.coverage.reportPaths=coverage.out \
                                -Dsonar.exclusions="**/*_test.go,**/vendor/**,**/*.pb.go" \
                                -Dsonar.scm.revision=${GIT_COMMIT} \
                                -Dsonar.branch.name=${BRANCH_NAME} \
                                -Dsonar.projectVersion=main-${BUILD_NUMBER} || echo "SonarCloud analysis completed with warnings"
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            when {
                allOf {
                    branch 'main'
                    environment name: 'HAS_GO_CHANGES', value: 'true'
                }
            }
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        try {
                            sleep(30) // Give SonarCloud time to process
                            def qg = waitForQualityGate(abortPipeline: false)

                            if (qg.status != 'OK') {
                                echo "Quality Gate failed: ${qg.status}"
                                echo "Dashboard: https://sonarcloud.io/project/overview?id=${env.SONAR_PROJECT_KEY}"
                                currentBuild.result = 'UNSTABLE'
                            } else {
                                echo "Quality Gate passed!"
                            }
                        } catch (Exception e) {
                            echo "Quality Gate check failed: ${e.getMessage()}"
                            echo "Continuing with warning - check dashboard manually"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }

        stage('Build & Push to ECR') {
            when {
                allOf {
                    branch 'main'
                    not { expression { currentBuild.result == 'FAILURE' } }
                }
            }
            steps {
                script {
                    def shortCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    def timestamp = sh(script: "date '+%Y%m%d%H%M'", returnStdout: true).trim()

                    env.IMAGE_TAG = "v${BUILD_NUMBER}-${timestamp}-${shortCommit}"
                    env.LATEST_TAG = "latest"

                    echo "Building image: ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                }

                sh """
                    # Build Docker image
                    docker build -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} .
                    docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}
                    docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.DOCKER_REGISTRY}:${env.LATEST_TAG}
                """

                withAWS(credentials: 'aws-credentials', region: "${env.AWS_REGION}") {
                    sh '''
                        # Login and push to ECR
                        aws ecr get-login-password --region $AWS_REGION | \
                            docker login --username AWS --password-stdin $DOCKER_REGISTRY

                        docker push $DOCKER_REGISTRY:$IMAGE_TAG
                        docker push $DOCKER_REGISTRY:$LATEST_TAG

                        echo "Images pushed:"
                        echo "  - $DOCKER_REGISTRY:$IMAGE_TAG"
                        echo "  - $DOCKER_REGISTRY:$LATEST_TAG"
                    '''
                }
            }
        }
    }

    post {
        always {
            sh '''
                # Cleanup
                docker rmi ${IMAGE_NAME}:${IMAGE_TAG} || true
                docker rmi ${DOCKER_REGISTRY}:${IMAGE_TAG} || true
                docker rmi ${DOCKER_REGISTRY}:${LATEST_TAG} || true
                rm -f coverage.out || true
            '''
        }

        success {
            script {
                if (env.BRANCH_NAME == 'main') {
                    def message = "✅ Production deployment successful"
                    if (env.HAS_GO_CHANGES == 'true') {
                        message += "\n📊 Analyzed files: ${env.CHANGED_GO_FILES}"
                        message += "\n🔍 SonarCloud: https://sonarcloud.io/project/overview?id=${env.SONAR_PROJECT_KEY}"
                    }
                    if (env.IMAGE_TAG) {
                        message += "\n🐳 Image: ${env.DOCKER_REGISTRY}:${env.IMAGE_TAG}"
                    }
                    echo message
                }
            }
        }

        failure {
            echo "❌ Pipeline failed - check logs for details"
        }

        unstable {
            echo "⚠️ Pipeline completed with warnings - quality gate issues detected"
        }
    }
}
